// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

package mahjong.mode;

public final class Mahjong {
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongPengResponse_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongPengResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongGang_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongGang_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongChi_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongChi_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongHuResponse_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongHuResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongGetCardResponse_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongGetCardResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongPlayCard_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_MahjongPlayCard_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongStartResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongStartResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongGameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongGameInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongSeatGameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongSeatGameInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongResultResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongResultResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongUserResult_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongUserResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongOverResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongOverResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_MahjongSeatGameOver_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_MahjongSeatGameOver_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;

  static {
    java.lang.String[] descriptorData = {
            "\n\rmahjong.proto\"#\n\023MahjongPengResponse\022\014" +
                    "\n\004card\030\002 \001(\005\"\033\n\013MahjongGang\022\014\n\004card\030\001 \001(" +
                    "\005\"\033\n\nMahjongChi\022\r\n\005cards\030\001 \003(\005\"!\n\021Mahjon" +
                    "gHuResponse\022\014\n\004card\030\001 \001(\005\"&\n\026MahjongGetC" +
                    "ardResponse\022\014\n\004card\030\001 \001(\005\"\037\n\017MahjongPlay" +
                    "Card\022\014\n\004card\030\001 \001(\005\"]\n\024MahjongStartRespon" +
                    "se\022\016\n\006banker\030\001 \001(\r\022\014\n\004dice\030\002 \003(\r\022\r\n\005card" +
                    "s\030\003 \003(\005\022\030\n\020surplusCardsSize\030\004 \001(\r\"v\n\017Mah" +
                    "jongGameInfo\022#\n\005seats\030\001 \003(\0132\024.MahjongSea" +
                    "tGameInfo\022\021\n\tgameCount\030\002 \001(\r\022\021\n\tgameTime",
            "s\030\003 \001(\r\022\030\n\020surplusCardsSize\030\004 \001(\r\"\320\001\n\023Ma" +
                    "hjongSeatGameInfo\022\n\n\002ID\030\001 \001(\r\022\024\n\014initial" +
                    "Cards\030\002 \003(\005\022\r\n\005cards\030\003 \003(\005\022\021\n\tcardsSize\030" +
                    "\004 \001(\r\022\021\n\tpengCards\030\005 \003(\005\022\023\n\013anGangCards\030" +
                    "\006 \003(\005\022\025\n\rmingGangCards\030\007 \003(\005\022\020\n\010chiCards" +
                    "\030\010 \003(\005\022\023\n\013playedCards\030\t \003(\005\022\017\n\007isRobot\030\n" +
                    " \001(\010\"Y\n\025MahjongResultResponse\022&\n\nuserRes" +
                    "ult\030\001 \003(\0132\022.MahjongUserResult\022\030\n\020readyTi" +
                    "meCounter\030\002 \001(\005\"\210\002\n\021MahjongUserResult\022\n\n" +
                    "\002ID\030\001 \001(\r\022\021\n\tcardScore\030\002 \001(\005\022\036\n\nscoreTyp",
            "es\030\003 \003(\0162\n.ScoreType\022\021\n\tgangScore\030\004 \001(\005\022" +
                    "\017\n\007maScore\030\005 \001(\005\022\r\n\005cards\030\006 \003(\005\022\020\n\010chiCa" +
                    "rds\030\007 \003(\005\022\021\n\tpengCards\030\010 \003(\005\022\023\n\013anGangCa" +
                    "rds\030\t \003(\005\022\025\n\rmingGangCards\030\n \003(\005\022\021\n\twinO" +
                    "rLose\030\013 \001(\005\022\r\n\005score\030\014 \001(\005\022\016\n\006maCard\030\r \003" +
                    "(\005\"`\n\023MahjongOverResponse\022&\n\010gameOver\030\001 " +
                    "\003(\0132\024.MahjongSeatGameOver\022\017\n\007backKey\030\002 \001" +
                    "(\t\022\020\n\010dateTime\030\003 \001(\004\"\220\001\n\023MahjongSeatGame" +
                    "Over\022\n\n\002ID\030\001 \001(\r\022\021\n\twinOrLose\030\002 \001(\005\022\017\n\007h" +
                    "uCount\030\003 \001(\r\022\021\n\tzimoCount\030\004 \001(\r\022\024\n\014dianp",
            "aoCount\030\005 \001(\r\022\016\n\006angang\030\006 \001(\r\022\020\n\010minggan" +
                    "g\030\007 \001(\r*\345\002\n\tScoreType\022\013\n\007PING_HU\020\000\022\013\n\007ZI" +
                    "MO_HU\020\001\022\016\n\nMENQING_HU\020\002\022\017\n\013PENGPENG_HU\020\003" +
                    "\022\016\n\nHUNYISE_HU\020\004\022\017\n\013QINGYISE_HU\020\005\022\020\n\014QIX" +
                    "IAODUI_HU\020\006\022\020\n\014HUNYAOJIU_HU\020\007\022\026\n\022HAOHUAQ" +
                    "IXIAODUI_HU\020\010\022\020\n\014SHISANYAO_HU\020\t\022\013\n\007TIAN_" +
                    "HU\020\n\022\t\n\005DI_HU\020\013\022\021\n\rQUANYAOJIU_HU\020\014\022\016\n\nQU" +
                    "ANFAN_HU\020\r\022\034\n\030SHUANGHAOHUAQIXIAODUI_HU\020\016" +
                    "\022\031\n\025SANHAOHUAQIXIAODUI_HU\020\017\022\022\n\016SHIBALUOH" +
                    "AN_HU\020\020\022\t\n\005HAIDI\020\021\022\013\n\007GANGBAO\020\022\022\016\n\nZHUAN",
            "GYING\020\023B\016\n\014mahjong.modeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
            new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                public com.google.protobuf.ExtensionRegistry assignDescriptors(
                        com.google.protobuf.Descriptors.FileDescriptor root) {
                    descriptor = root;
                    return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
            .internalBuildGeneratedFileFrom(descriptorData,
                    new com.google.protobuf.Descriptors.FileDescriptor[]{
        }, assigner);
    internal_static_MahjongPengResponse_descriptor =
            getDescriptor().getMessageTypes().get(0);
    internal_static_MahjongPengResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongPengResponse_descriptor,
            new java.lang.String[]{"Card",});
    internal_static_MahjongGang_descriptor =
            getDescriptor().getMessageTypes().get(1);
    internal_static_MahjongGang_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongGang_descriptor,
            new java.lang.String[]{"Card",});
    internal_static_MahjongChi_descriptor =
            getDescriptor().getMessageTypes().get(2);
    internal_static_MahjongChi_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongChi_descriptor,
            new java.lang.String[]{"Cards",});
    internal_static_MahjongHuResponse_descriptor =
            getDescriptor().getMessageTypes().get(3);
    internal_static_MahjongHuResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongHuResponse_descriptor,
            new java.lang.String[]{"Card",});
    internal_static_MahjongGetCardResponse_descriptor =
            getDescriptor().getMessageTypes().get(4);
    internal_static_MahjongGetCardResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongGetCardResponse_descriptor,
            new java.lang.String[]{"Card",});
    internal_static_MahjongPlayCard_descriptor =
            getDescriptor().getMessageTypes().get(5);
    internal_static_MahjongPlayCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongPlayCard_descriptor,
            new java.lang.String[]{"Card",});
    internal_static_MahjongStartResponse_descriptor =
            getDescriptor().getMessageTypes().get(6);
    internal_static_MahjongStartResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongStartResponse_descriptor,
            new java.lang.String[]{"Banker", "Dice", "Cards", "SurplusCardsSize",});
    internal_static_MahjongGameInfo_descriptor =
            getDescriptor().getMessageTypes().get(7);
    internal_static_MahjongGameInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongGameInfo_descriptor,
            new java.lang.String[]{"Seats", "GameCount", "GameTimes", "SurplusCardsSize",});
    internal_static_MahjongSeatGameInfo_descriptor =
            getDescriptor().getMessageTypes().get(8);
    internal_static_MahjongSeatGameInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongSeatGameInfo_descriptor,
            new java.lang.String[]{"ID", "InitialCards", "Cards", "CardsSize", "PengCards", "AnGangCards", "MingGangCards", "ChiCards", "PlayedCards", "IsRobot",});
    internal_static_MahjongResultResponse_descriptor =
            getDescriptor().getMessageTypes().get(9);
    internal_static_MahjongResultResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongResultResponse_descriptor,
            new java.lang.String[]{"UserResult", "ReadyTimeCounter",});
    internal_static_MahjongUserResult_descriptor =
            getDescriptor().getMessageTypes().get(10);
    internal_static_MahjongUserResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongUserResult_descriptor,
            new java.lang.String[]{"ID", "CardScore", "ScoreTypes", "GangScore", "MaScore", "Cards", "ChiCards", "PengCards", "AnGangCards", "MingGangCards", "WinOrLose", "Score", "MaCard",});
    internal_static_MahjongOverResponse_descriptor =
            getDescriptor().getMessageTypes().get(11);
    internal_static_MahjongOverResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongOverResponse_descriptor,
            new java.lang.String[]{"GameOver", "BackKey", "DateTime",});
    internal_static_MahjongSeatGameOver_descriptor =
            getDescriptor().getMessageTypes().get(12);
    internal_static_MahjongSeatGameOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_MahjongSeatGameOver_descriptor,
            new java.lang.String[]{"ID", "WinOrLose", "HuCount", "ZimoCount", "DianpaoCount", "Angang", "Minggang",});
  }

    private Mahjong() {
    }

  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistry registry) {
      registerAllExtensions(
              (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  /**
   * Protobuf enum {@code ScoreType}
   */
  public enum ScoreType
          implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *平胡
     * </pre>
     *
     * <code>PING_HU = 0;</code>
     */
    PING_HU(0),
    /**
     * <pre>
     *自摸
     * </pre>
     *
     * <code>ZIMO_HU = 1;</code>
     */
    ZIMO_HU(1),
    /**
     * <pre>
     *门清
     * </pre>
     *
     * <code>MENQING_HU = 2;</code>
     */
    MENQING_HU(2),
    /**
     * <pre>
     *碰碰胡
     * </pre>
     *
     * <code>PENGPENG_HU = 3;</code>
     */
    PENGPENG_HU(3),
    /**
     * <pre>
     *混一色
     * </pre>
     *
     * <code>HUNYISE_HU = 4;</code>
     */
    HUNYISE_HU(4),
    /**
     * <pre>
     *清一色
     * </pre>
     *
     * <code>QINGYISE_HU = 5;</code>
     */
    QINGYISE_HU(5),
    /**
     * <pre>
     *七小对
     * </pre>
     *
     * <code>QIXIAODUI_HU = 6;</code>
     */
    QIXIAODUI_HU(6),
      /**
     * <pre>
       *混幺九
     * </pre>
     *
     * <code>HUNYAOJIU_HU = 7;</code>
     */
    HUNYAOJIU_HU(7),
      /**
     * <pre>
       *豪华七小对
     * </pre>
     *
     * <code>HAOHUAQIXIAODUI_HU = 8;</code>
     */
    HAOHUAQIXIAODUI_HU(8),
      /**
     * <pre>
       *十三幺
     * </pre>
     *
     * <code>SHISANYAO_HU = 9;</code>
     */
    SHISANYAO_HU(9),
      /**
     * <pre>
       *天胡
     * </pre>
     *
     * <code>TIAN_HU = 10;</code>
     */
    TIAN_HU(10),
      /**
     * <pre>
       *地胡
     * </pre>
     *
     * <code>DI_HU = 11;</code>
     */
    DI_HU(11),
      /**
     * <pre>
       *全幺九
     * </pre>
     *
     * <code>QUANYAOJIU_HU = 12;</code>
     */
    QUANYAOJIU_HU(12),
      /**
     * <pre>
       *全番
     * </pre>
     *
       * <code>QUANFAN_HU = 13;</code>
     */
      QUANFAN_HU(13),
      /**
     * <pre>
       *双豪华七小对
     * </pre>
     *
     * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
     */
    SHUANGHAOHUAQIXIAODUI_HU(14),
      /**
     * <pre>
       *三豪华七小对
     * </pre>
     *
     * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
     */
    SANHAOHUAQIXIAODUI_HU(15),
      /**
     * <pre>
       *十八罗汉
     * </pre>
     *
       * <code>SHIBALUOHAN_HU = 16;</code>
       */
      SHIBALUOHAN_HU(16),
      /**
     * <pre>
       *海底
       * </pre>
       *
       * <code>HAIDI = 17;</code>
       */
      HAIDI(17),
      /**
       * <pre>
       * 杠爆
       * </pre>
       * <p>
       * <code>GANGBAO = 18;</code>
       */
      GANGBAO(18),
      /**
       * <pre>
       * 庄硬
       * </pre>
       * <p>
       * <code>ZHUANGYING = 19;</code>
       */
      ZHUANGYING(19),
      UNRECOGNIZED(-1),;

      /**
       * <pre>
       *平胡
     * </pre>
     *
     * <code>PING_HU = 0;</code>
       */
    public static final int PING_HU_VALUE = 0;
    /**
     * <pre>
     *自摸
     * </pre>
     *
     * <code>ZIMO_HU = 1;</code>
     */
    public static final int ZIMO_HU_VALUE = 1;
    /**
     * <pre>
     *门清
     * </pre>
     *
     * <code>MENQING_HU = 2;</code>
     */
    public static final int MENQING_HU_VALUE = 2;
    /**
     * <pre>
     *碰碰胡
     * </pre>
     *
     * <code>PENGPENG_HU = 3;</code>
     */
    public static final int PENGPENG_HU_VALUE = 3;
    /**
     * <pre>
     *混一色
     * </pre>
     *
     * <code>HUNYISE_HU = 4;</code>
     */
    public static final int HUNYISE_HU_VALUE = 4;
    /**
     * <pre>
     *清一色
     * </pre>
     *
     * <code>QINGYISE_HU = 5;</code>
     */
    public static final int QINGYISE_HU_VALUE = 5;
    /**
     * <pre>
     *七小对
     * </pre>
     *
     * <code>QIXIAODUI_HU = 6;</code>
     */
    public static final int QIXIAODUI_HU_VALUE = 6;
    /**
     * <pre>
     *混幺九
     * </pre>
     *
     * <code>HUNYAOJIU_HU = 7;</code>
     */
    public static final int HUNYAOJIU_HU_VALUE = 7;
    /**
     * <pre>
     *豪华七小对
     * </pre>
     *
     * <code>HAOHUAQIXIAODUI_HU = 8;</code>
     */
    public static final int HAOHUAQIXIAODUI_HU_VALUE = 8;
    /**
     * <pre>
     *十三幺
     * </pre>
     *
     * <code>SHISANYAO_HU = 9;</code>
     */
    public static final int SHISANYAO_HU_VALUE = 9;
    /**
     * <pre>
     *天胡
     * </pre>
     *
     * <code>TIAN_HU = 10;</code>
     */
    public static final int TIAN_HU_VALUE = 10;
    /**
     * <pre>
     *地胡
     * </pre>
     *
     * <code>DI_HU = 11;</code>
     */
    public static final int DI_HU_VALUE = 11;
    /**
     * <pre>
     *全幺九
     * </pre>
     *
     * <code>QUANYAOJIU_HU = 12;</code>
     */
    public static final int QUANYAOJIU_HU_VALUE = 12;
      /**
       * <pre>
       *全番
     * </pre>
       *
       * <code>QUANFAN_HU = 13;</code>
       */
      public static final int QUANFAN_HU_VALUE = 13;
    /**
     * <pre>
     *双豪华七小对
     * </pre>
     *
     * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
     */
    public static final int SHUANGHAOHUAQIXIAODUI_HU_VALUE = 14;
    /**
     * <pre>
     *三豪华七小对
     * </pre>
     *
     * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
     */
    public static final int SANHAOHUAQIXIAODUI_HU_VALUE = 15;
      /**
       * <pre>
       *十八罗汉
       * </pre>
       *
       * <code>SHIBALUOHAN_HU = 16;</code>
       */
      public static final int SHIBALUOHAN_HU_VALUE = 16;
      /**
       * <pre>
       * 海底
       * </pre>
       * <p>
       * <code>HAIDI = 17;</code>
       */
      public static final int HAIDI_VALUE = 17;
      /**
       * <pre>
       * 杠爆
       * </pre>
       * <p>
       * <code>GANGBAO = 18;</code>
       */
      public static final int GANGBAO_VALUE = 18;
      /**
       * <pre>
       *庄硬
       * </pre>
       *
       * <code>ZHUANGYING = 19;</code>
       */
      public static final int ZHUANGYING_VALUE = 19;
      private static final com.google.protobuf.Internal.EnumLiteMap<
              ScoreType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ScoreType>() {
            public ScoreType findValueByNumber(int number) {
                return ScoreType.forNumber(number);
            }
              };
      private static final ScoreType[] VALUES = values();
      private final int value;

      private ScoreType(int value) {
          this.value = value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
    @java.lang.Deprecated
    public static ScoreType valueOf(int value) {
        return forNumber(value);
    }

      public static ScoreType forNumber(int value) {
          switch (value) {
              case 0:
                  return PING_HU;
              case 1:
                  return ZIMO_HU;
              case 2:
                  return MENQING_HU;
              case 3:
                  return PENGPENG_HU;
              case 4:
                  return HUNYISE_HU;
              case 5:
                  return QINGYISE_HU;
              case 6:
                  return QIXIAODUI_HU;
              case 7:
                  return HUNYAOJIU_HU;
              case 8:
                  return HAOHUAQIXIAODUI_HU;
              case 9:
                  return SHISANYAO_HU;
              case 10:
                  return TIAN_HU;
              case 11:
                  return DI_HU;
              case 12:
                  return QUANYAOJIU_HU;
              case 13:
                  return QUANFAN_HU;
              case 14:
                  return SHUANGHAOHUAQIXIAODUI_HU;
              case 15:
                  return SANHAOHUAQIXIAODUI_HU;
              case 16:
                  return SHIBALUOHAN_HU;
              case 17: return HAIDI;
        case 18: return GANGBAO;
        case 19: return ZHUANGYING;
              default:
                  return null;
          }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ScoreType>
        internalGetValueMap() {
      return internalValueMap;
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
        return mahjong.mode.Mahjong.getDescriptor().getEnumTypes().get(0);
    }

    public static ScoreType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
        }
        return value;
    }

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
        return getDescriptor();
    }

      // @@protoc_insertion_point(enum_scope:ScoreType)
  }

    public interface MahjongPengResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:MahjongPengResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 2;</code>
     */
    int getCard();
    }

    public interface MahjongGangOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongGang)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    int getCard();
  }
  public interface MahjongChiOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongChi)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    int getCardsCount();
    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    int getCards(int index);
  }
  public interface MahjongHuResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongHuResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    int getCard();
  }

    public interface MahjongGetCardResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:MahjongGetCardResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    int getCard();
    }

    public interface MahjongPlayCardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongPlayCard)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    int getCard();
    }

    public interface MahjongStartResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:MahjongStartResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *庄家ID
     * </pre>
     *
     * <code>uint32 banker = 1;</code>
     */
    int getBanker();

    /**
     * <pre>
     *骰子
     * </pre>
     *
     * <code>repeated uint32 dice = 2;</code>
     */
    java.util.List<java.lang.Integer> getDiceList();
    /**
     * <pre>
     *骰子
     * </pre>
     *
     * <code>repeated uint32 dice = 2;</code>
     */
    int getDiceCount();
    /**
     * <pre>
     *骰子
     * </pre>
     *
     * <code>repeated uint32 dice = 2;</code>
     */
    int getDice(int index);

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    int getCardsCount();
    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    int getCards(int index);

        /**
         * <pre>
         *剩余张数
         * </pre>
         *
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        int getSurplusCardsSize();
    }

    public interface MahjongGameInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongGameInfo)
            com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *座位
     * </pre>
     *
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo>
    getSeatsList();
    /**
     * <pre>
     *座位
     * </pre>
     *
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongSeatGameInfo getSeats(int index);
    /**
     * <pre>
     *座位
     * </pre>
     *
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    int getSeatsCount();
    /**
     * <pre>
     *座位
     * </pre>
     *
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
    getSeatsOrBuilderList();
    /**
     * <pre>
     *座位
     * </pre>
     *
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
            int index);

    /**
     * <pre>
     *当前游戏局数
     * </pre>
     *
     * <code>uint32 gameCount = 2;</code>
     */
    int getGameCount();

        /**
         * <pre>
         * 总局数
         * </pre>
         * <p>
         * <code>uint32 gameTimes = 3;</code>
         */
        int getGameTimes();

        /**
         * <pre>
         *剩余张数
     * </pre>
     *
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        int getSurplusCardsSize();
    }

    public interface MahjongSeatGameInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongSeatGameInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *ID
     * </pre>
     *
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    java.util.List<java.lang.Integer> getInitialCardsList();
    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCardsCount();
    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCards(int index);

    /**
     * <pre>
     *当前手牌(如果是其他玩家的,就没有)
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <pre>
     *当前手牌(如果是其他玩家的,就没有)
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    int getCardsCount();
    /**
     * <pre>
     *当前手牌(如果是其他玩家的,就没有)
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     *其他玩家手牌数量
     * </pre>
     *
     * <code>uint32 cardsSize = 4;</code>
     */
    int getCardsSize();

    /**
     * <pre>
     *碰的牌
     * </pre>
     *
     * <code>repeated int32 pengCards = 5;</code>
     */
    java.util.List<java.lang.Integer> getPengCardsList();
    /**
     * <pre>
     *碰的牌
     * </pre>
     *
     * <code>repeated int32 pengCards = 5;</code>
     */
    int getPengCardsCount();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        int getPengCards(int index);

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 anGangCards = 6;</code>
         */
        java.util.List<java.lang.Integer> getAnGangCardsList();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 anGangCards = 6;</code>
         */
        int getAnGangCardsCount();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 anGangCards = 6;</code>
         */
        int getAnGangCards(int index);

        /**
         * <pre>
         * 明杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 mingGangCards = 7;</code>
         */
        java.util.List<java.lang.Integer> getMingGangCardsList();

        /**
         * <pre>
         *明杠的牌
         * </pre>
         *
         * <code>repeated int32 mingGangCards = 7;</code>
         */
    int getMingGangCardsCount();
    /**
     * <pre>
     *明杠的牌
     * </pre>
     *
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    int getMingGangCards(int index);

    /**
     * <pre>
     *吃的牌
     * </pre>
     *
     * <code>repeated int32 chiCards = 8;</code>
     */
    java.util.List<java.lang.Integer> getChiCardsList();
    /**
     * <pre>
     *吃的牌
     * </pre>
     *
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCardsCount();
    /**
     * <pre>
     *吃的牌
     * </pre>
     *
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCards(int index);

    /**
     * <pre>
     *出过的牌
     * </pre>
     *
     * <code>repeated int32 playedCards = 9;</code>
     */
    java.util.List<java.lang.Integer> getPlayedCardsList();

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 9;</code>
         */
        int getPlayedCardsCount();
    /**
     * <pre>
     *出过的牌
     * </pre>
     *
     * <code>repeated int32 playedCards = 9;</code>
     */
    int getPlayedCards(int index);

    /**
     * <pre>
     *是否托管
     * </pre>
     *
     * <code>bool isRobot = 10;</code>
     */
    boolean getIsRobot();
  }
  public interface MahjongResultResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongResultResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *用户结算
     * </pre>
     *
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    java.util.List<mahjong.mode.Mahjong.MahjongUserResult>
        getUserResultList();
    /**
     * <pre>
     *用户结算
     * </pre>
     *
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongUserResult getUserResult(int index);
    /**
     * <pre>
     *用户结算
     * </pre>
     *
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    int getUserResultCount();
    /**
     * <pre>
     *用户结算
     * </pre>
     *
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    java.util.List<? extends mahjong.mode.Mahjong.MahjongUserResultOrBuilder>
    getUserResultOrBuilderList();

      /**
       * <pre>
       *用户结算
       * </pre>
     *
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
        int index);

    /**
     * <pre>
     *准备倒计时
     * </pre>
     *
     * <code>int32 readyTimeCounter = 2;</code>
     */
    int getReadyTimeCounter();
  }
  public interface MahjongUserResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongUserResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *人
     * </pre>
     *
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     *牌型输赢
     * </pre>
     *
     * <code>int32 cardScore = 2;</code>
     */
    int getCardScore();

    /**
     * <pre>
     *牌型
     * </pre>
     *
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    java.util.List<mahjong.mode.Mahjong.ScoreType> getScoreTypesList();
    /**
     * <pre>
     *牌型
     * </pre>
     *
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    int getScoreTypesCount();
    /**
     * <pre>
     *牌型
     * </pre>
     *
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    mahjong.mode.Mahjong.ScoreType getScoreTypes(int index);
    /**
     * <pre>
     *牌型
     * </pre>
     *
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    java.util.List<java.lang.Integer>
    getScoreTypesValueList();

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      int getScoreTypesValue(int index);

      /**
       * <pre>
       * 杠牌输赢
       * </pre>
       * <p>
       * <code>int32 gangScore = 4;</code>
       */
      int getGangScore();

      /**
       * <pre>
       * 卖马输赢
       * </pre>
       * <p>
       * <code>int32 maScore = 5;</code>
       */
      int getMaScore();

      /**
       * <pre>
       * 手牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 6;</code>
       */
      java.util.List<java.lang.Integer> getCardsList();

      /**
       * <pre>
       * 手牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 6;</code>
       */
      int getCardsCount();

      /**
       * <pre>
       * 手牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 6;</code>
       */
      int getCards(int index);

      /**
       * <pre>
       * 吃牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 7;</code>
       */
      java.util.List<java.lang.Integer> getChiCardsList();

      /**
       * <pre>
       * 吃牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 7;</code>
       */
      int getChiCardsCount();

      /**
       * <pre>
       * 吃牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 7;</code>
       */
      int getChiCards(int index);

      /**
       * <pre>
       * 碰牌
       * </pre>
       * <p>
       * <code>repeated int32 pengCards = 8;</code>
       */
      java.util.List<java.lang.Integer> getPengCardsList();

      /**
       * <pre>
       * 碰牌
       * </pre>
       * <p>
       * <code>repeated int32 pengCards = 8;</code>
       */
      int getPengCardsCount();

      /**
       * <pre>
       * 碰牌
       * </pre>
       * <p>
       * <code>repeated int32 pengCards = 8;</code>
       */
      int getPengCards(int index);

      /**
       * <pre>
       * 暗杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 anGangCards = 9;</code>
       */
      java.util.List<java.lang.Integer> getAnGangCardsList();

      /**
       * <pre>
       *暗杠的牌
     * </pre>
     *
     * <code>repeated int32 anGangCards = 9;</code>
     */
    int getAnGangCardsCount();
    /**
     * <pre>
     *暗杠的牌
     * </pre>
     *
     * <code>repeated int32 anGangCards = 9;</code>
     */
    int getAnGangCards(int index);

    /**
     * <pre>
     *明杠的牌
     * </pre>
     *
     * <code>repeated int32 mingGangCards = 10;</code>
     */
    java.util.List<java.lang.Integer> getMingGangCardsList();

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 10;</code>
       */
      int getMingGangCardsCount();

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 10;</code>
       */
      int getMingGangCards(int index);

      /**
       * <pre>
       *当局输赢
       * </pre>
       *
       * <code>int32 winOrLose = 11;</code>
     */
    int getWinOrLose();

    /**
     * <pre>
     *总输赢分数
     * </pre>
     *
     * <code>int32 score = 12;</code>
     */
    int getScore();

    /**
     * <pre>
     *买的马
     * </pre>
     *
     * <code>repeated int32 maCard = 13;</code>
     */
    java.util.List<java.lang.Integer> getMaCardList();
    /**
     * <pre>
     *买的马
     * </pre>
     *
     * <code>repeated int32 maCard = 13;</code>
     */
    int getMaCardCount();
    /**
     * <pre>
     *买的马
     * </pre>
     *
     * <code>repeated int32 maCard = 13;</code>
     */
    int getMaCard(int index);
  }
  public interface MahjongOverResponseOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongOverResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
     */
    java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver>
        getGameOverList();
    /**
     * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongSeatGameOver getGameOver(int index);
    /**
     * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
     */
    int getGameOverCount();
    /**
     * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
     */
    java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder>
        getGameOverOrBuilderList();
    /**
     * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
     */
    mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder getGameOverOrBuilder(
            int index);

      /**
       * <pre>
       * 回到大厅的码
       * </pre>
       * <p>
       * <code>string backKey = 2;</code>
       */
      java.lang.String getBackKey();

      /**
       * <pre>
       *回到大厅的码
       * </pre>
     *
     * <code>string backKey = 2;</code>
     */
    com.google.protobuf.ByteString
        getBackKeyBytes();

    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>uint64 dateTime = 3;</code>
     */
    long getDateTime();
  }
  public interface MahjongSeatGameOverOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MahjongSeatGameOver)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *人
     * </pre>
     *
     * <code>uint32 ID = 1;</code>
     */
    int getID();

      /**
       * <pre>
       * 总输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 2;</code>
       */
      int getWinOrLose();

      /**
       * <pre>
       * 胡牌次数
       * </pre>
       * <p>
       * <code>uint32 huCount = 3;</code>
       */
      int getHuCount();

      /**
       * <pre>
       *自摸次数
       * </pre>
       *
     * <code>uint32 zimoCount = 4;</code>
     */
    int getZimoCount();

    /**
     * <pre>
     *点炮次数
     * </pre>
     *
     * <code>uint32 dianpaoCount = 5;</code>
     */
    int getDianpaoCount();

    /**
     * <pre>
     *暗杠次数
     * </pre>
     *
     * <code>uint32 angang = 6;</code>
     */
    int getAngang();

      /**
       * <pre>
     *明杠次数
     * </pre>
     *
     * <code>uint32 minggang = 7;</code>
     */
    int getMinggang();
  }

  /**
   * <pre>
   *碰 TOUCH
   * </pre>
   *
   * Protobuf type {@code MahjongPengResponse}
   */
  public  static final class MahjongPengResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongPengResponse)
      MahjongPengResponseOrBuilder {
    public static final int CARD_FIELD_NUMBER = 2;
    private static final long serialVersionUID = 0L;
      // @@protoc_insertion_point(class_scope:MahjongPengResponse)
      private static final mahjong.mode.Mahjong.MahjongPengResponse DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongPengResponse>
        PARSER = new com.google.protobuf.AbstractParser<MahjongPengResponse>() {
      public MahjongPengResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongPengResponse(input, extensionRegistry);
      }
    };

      static {
          DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongPengResponse();
      }

      private int card_;
      private byte memoizedIsInitialized = -1;

      // Use MahjongPengResponse.newBuilder() to construct.
      private MahjongPengResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
      }
    private MahjongPengResponse() {
      card_ = 0;
    }

    private MahjongPengResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
          while (!done) {
              int tag = input.readTag();
              switch (tag) {
                  case 0:
                      done = true;
                      break;
                  default: {
              if (!input.skipField(tag)) {
                done = true;
              }
                      break;
                  }
                  case 16: {

              card_ = input.readInt32();
              break;
                  }
              }
          }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.Mahjong.internal_static_MahjongPengResponse_descriptor;
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
        java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

      public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
              java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
        com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

      public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }

      public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

      public static mahjong.mode.Mahjong.MahjongPengResponse parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

      public static mahjong.mode.Mahjong.MahjongPengResponse parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static mahjong.mode.Mahjong.MahjongPengResponse getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

      public static com.google.protobuf.Parser<MahjongPengResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongPengResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mahjong.mode.Mahjong.MahjongPengResponse.class, mahjong.mode.Mahjong.MahjongPengResponse.Builder.class);
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 2;</code>
     */
    public int getCard() {
      return card_;
    }

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
        return true;
    }

      public static Builder newBuilder(mahjong.mode.Mahjong.MahjongPengResponse prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
                  ? new Builder() : new Builder().mergeFrom(this);
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
              throws java.io.IOException {
          if (card_ != 0) {
              output.writeInt32(2, card_);
          }
      }

      public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (card_ != 0) {
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32Size(2, card_);
      }
          memoizedSize = size;
          return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mahjong.mode.Mahjong.MahjongPengResponse)) {
          return super.equals(obj);
      }
        mahjong.mode.Mahjong.MahjongPengResponse other = (mahjong.mode.Mahjong.MahjongPengResponse) obj;

        boolean result = true;
        result = result && (getCard()
                == other.getCard());
        return result;
    }

      @java.lang.Override
      public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CARD_FIELD_NUMBER;
          hash = (53 * hash) + getCard();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
      }

    public Builder newBuilderForType() { return newBuilder(); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongPengResponse> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongPengResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * <pre>
     *碰 TOUCH
     * </pre>
     *
     * Protobuf type {@code MahjongPengResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongPengResponse)
            mahjong.mode.Mahjong.MahjongPengResponseOrBuilder {
        private int card_;

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        // Construct using mahjong.mode.Mahjong.MahjongPengResponse.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongPengResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
        return mahjong.mode.Mahjong.internal_static_MahjongPengResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        mahjong.mode.Mahjong.MahjongPengResponse.class, mahjong.mode.Mahjong.MahjongPengResponse.Builder.class);
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        card_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
          return mahjong.mode.Mahjong.internal_static_MahjongPengResponse_descriptor;
      }

        public mahjong.mode.Mahjong.MahjongPengResponse getDefaultInstanceForType() {
            return mahjong.mode.Mahjong.MahjongPengResponse.getDefaultInstance();
        }

        public mahjong.mode.Mahjong.MahjongPengResponse build() {
            mahjong.mode.Mahjong.MahjongPengResponse result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.Mahjong.MahjongPengResponse buildPartial() {
            mahjong.mode.Mahjong.MahjongPengResponse result = new mahjong.mode.Mahjong.MahjongPengResponse(this);
            result.card_ = card_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
      }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(mahjong.mode.Mahjong.MahjongPengResponse other) {
        if (other == mahjong.mode.Mahjong.MahjongPengResponse.getDefaultInstance()) return this;
        if (other.getCard() != 0) {
          setCard(other.getCard());
        }
        onChanged();
        return this;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof mahjong.mode.Mahjong.MahjongPengResponse) {
              return mergeFrom((mahjong.mode.Mahjong.MahjongPengResponse)other);
        } else {
          super.mergeFrom(other);
              return this;
          }
      }

      public final boolean isInitialized() {
        return true;
      }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongPengResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongPengResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
            if (parsedMessage != null) {
                mergeFrom(parsedMessage);
            }
        }
            return this;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>int32 card = 2;</code>
         */
        public int getCard() {
        return card_;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 2;</code>
       */
      public Builder setCard(int value) {

          card_ = value;
          onChanged();
          return this;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 2;</code>
       */
      public Builder clearCard() {

        card_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
      }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongPengResponse)
    }

  }

  /**
   * <pre>
   *暗杠或扒杠 AN_GANG DIAN_GANG BA_GANG
   * </pre>
   *
   * Protobuf type {@code MahjongGang}
   */
  public  static final class MahjongGang extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongGang)
      MahjongGangOrBuilder {
    public static final int CARD_FIELD_NUMBER = 1;

      private MahjongGang() {
          card_ = 0;
      }

      private static final long serialVersionUID = 0L;
      // @@protoc_insertion_point(class_scope:MahjongGang)
    private static final mahjong.mode.Mahjong.MahjongGang DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongGang>
        PARSER = new com.google.protobuf.AbstractParser<MahjongGang>() {
      public MahjongGang parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongGang(input, extensionRegistry);
      }
    };

      static {
          DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongGang();
      }

      private int card_;
    private byte memoizedIsInitialized = -1;
    // Use MahjongGang.newBuilder() to construct.
    private MahjongGang(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

      private MahjongGang(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          int mutable_bitField0_ = 0;
          try {
              boolean done = false;
              while (!done) {
                  int tag = input.readTag();
          switch (tag) {
            case 0:
                done = true;
                break;
              default: {
                  if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

                card_ = input.readInt32();
                break;
            }
          }
              }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
              makeExtensionsImmutable();
          }
      }

      public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
          return mahjong.mode.Mahjong.internal_static_MahjongGang_descriptor;
      }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongGang parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongGang parseFrom(java.io.InputStream input)
        throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongGang parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input);
    }

    public static mahjong.mode.Mahjong.MahjongGang parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static Builder newBuilder(mahjong.mode.Mahjong.MahjongGang prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static mahjong.mode.Mahjong.MahjongGang getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<MahjongGang> parser() {
      return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

      public static mahjong.mode.Mahjong.MahjongGang parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
      }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongGang_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
                  mahjong.mode.Mahjong.MahjongGang.class, mahjong.mode.Mahjong.MahjongGang.Builder.class);
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    public int getCard() {
        return card_;
    }

      public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
      }

      public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
              throws java.io.IOException {
      if (card_ != 0) {
        output.writeInt32(1, card_);
      }
      }

      public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (card_ != 0) {
              size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, card_);
      }
      memoizedSize = size;
          return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
              return true;
          }
          if (!(obj instanceof mahjong.mode.Mahjong.MahjongGang)) {
              return super.equals(obj);
          }
          mahjong.mode.Mahjong.MahjongGang other = (mahjong.mode.Mahjong.MahjongGang) obj;

          boolean result = true;
          result = result && (getCard()
                  == other.getCard());
          return result;
      }

      @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CARD_FIELD_NUMBER;
      hash = (53 * hash) + getCard();
      hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
      }

      public Builder newBuilderForType() {
          return newBuilder();
      }

      public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongGang> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongGang getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

      /**
     * <pre>
     *暗杠或扒杠 AN_GANG DIAN_GANG BA_GANG
     * </pre>
     *
     * Protobuf type {@code MahjongGang}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:MahjongGang)
              mahjong.mode.Mahjong.MahjongGangOrBuilder {
          private int card_ ;

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

          // Construct using mahjong.mode.Mahjong.MahjongGang.newBuilder()
      private Builder() {
          maybeForceBuilderInitialization();
      }

          public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
              return mahjong.mode.Mahjong.internal_static_MahjongGang_descriptor;
          }

          private void maybeForceBuilderInitialization() {
              if (com.google.protobuf.GeneratedMessageV3
                      .alwaysUseFieldBuilders) {
        }
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
          return mahjong.mode.Mahjong.internal_static_MahjongGang_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                          mahjong.mode.Mahjong.MahjongGang.class, mahjong.mode.Mahjong.MahjongGang.Builder.class);
      }

          public Builder clear() {
              super.clear();
              card_ = 0;

              return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mahjong.mode.Mahjong.internal_static_MahjongGang_descriptor;
      }

          public mahjong.mode.Mahjong.MahjongGang getDefaultInstanceForType() {
              return mahjong.mode.Mahjong.MahjongGang.getDefaultInstance();
          }

          public mahjong.mode.Mahjong.MahjongGang build() {
              mahjong.mode.Mahjong.MahjongGang result = buildPartial();
              if (!result.isInitialized()) {
                  throw newUninitializedMessageException(result);
              }
              return result;
          }

          public Builder clone() {
              return (Builder) super.clone();
          }

          public mahjong.mode.Mahjong.MahjongGang buildPartial() {
              mahjong.mode.Mahjong.MahjongGang result = new mahjong.mode.Mahjong.MahjongGang(this);
              result.card_ = card_;
              onBuilt();
              return result;
          }

          public Builder setField(
                  com.google.protobuf.Descriptors.FieldDescriptor field,
                  Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

          public Builder clearOneof(
                  com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mahjong.mode.Mahjong.MahjongGang) {
          return mergeFrom((mahjong.mode.Mahjong.MahjongGang)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

          public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(mahjong.mode.Mahjong.MahjongGang other) {
          if (other == mahjong.mode.Mahjong.MahjongGang.getDefaultInstance()) return this;
          if (other.getCard() != 0) {
              setCard(other.getCard());
          }
          onChanged();
          return this;
      }

          public Builder mergeFrom(
                  com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongGang parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongGang) e.getUnfinishedMessage();
            throw e.unwrapIOException();
        } finally {
            if (parsedMessage != null) {
                mergeFrom(parsedMessage);
            }
        }
              return this;
          }

          /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
       */
      public int getCard() {
        return card_;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
       */
      public Builder setCard(int value) {

          card_ = value;
          onChanged();
        return this;
      }

          /**
           * <pre>
           * 牌
           * </pre>
           * <p>
           * <code>int32 card = 1;</code>
           */
          public Builder clearCard() {

              card_ = 0;
              onChanged();
              return this;
          }

          public final Builder setUnknownFields(
                  final com.google.protobuf.UnknownFieldSet unknownFields) {
              return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
      }


          // @@protoc_insertion_point(builder_scope:MahjongGang)
      }

  }

    /**
     * <pre>
     * 吃 CHI
     * </pre>
     * <p>
     * Protobuf type {@code MahjongChi}
     */
    public static final class MahjongChi extends
            com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongChi)
      MahjongChiOrBuilder {
    // Use MahjongChi.newBuilder() to construct.
    private MahjongChi(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MahjongChi() {
      cards_ = java.util.Collections.emptyList();
    }

    public static final int CARDS_FIELD_NUMBER = 1;
    private static final long serialVersionUID = 0L;
    // @@protoc_insertion_point(class_scope:MahjongChi)
    private static final mahjong.mode.Mahjong.MahjongChi DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongChi>
        PARSER = new com.google.protobuf.AbstractParser<MahjongChi>() {
      public MahjongChi parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongChi(input, extensionRegistry);
      }
    };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongChi();
    }

    private java.util.List<java.lang.Integer> cards_;
    private int cardsMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private MahjongChi(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
          int tag = input.readTag();
          switch (tag) {
              case 0:
                  done = true;
                  break;
              default: {
                  if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  cards_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
              }
              cards_.add(input.readInt32());
              break;
            }
              case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
                  }
                  while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
                  input.popLimit(limit);
                  break;
              }
          }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cards_ = java.util.Collections.unmodifiableList(cards_);
            }
            makeExtensionsImmutable();
        }
    }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mahjong.mode.Mahjong.internal_static_MahjongChi_descriptor;
    }

    public static mahjong.mode.Mahjong.MahjongChi parseFrom(
        java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
                java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongChi parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongChi parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }

        public static mahjong.mode.Mahjong.MahjongChi parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongChi prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongChi getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<MahjongChi> parser() {
        return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongChi_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mahjong.mode.Mahjong.MahjongChi.class, mahjong.mode.Mahjong.MahjongChi.Builder.class);
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    public int getCardsCount() {
        return cards_.size();
    }

        /**
     * <pre>
         *牌
         * </pre>
         *
         * <code>repeated int32 cards = 1;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        getSerializedSize();
        if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(cardsMemoizedSerializedSize);
        }
        for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
            int dataSize = 0;
            for (int i = 0; i < cards_.size(); i++) {
                dataSize += com.google.protobuf.CodedOutputStream
                        .computeInt32SizeNoTag(cards_.get(i));
            }
            size += dataSize;
            if (!getCardsList().isEmpty()) {
                size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongChi)) {
        return super.equals(obj);
      }
      mahjong.mode.Mahjong.MahjongChi other = (mahjong.mode.Mahjong.MahjongChi) obj;

      boolean result = true;
      result = result && getCardsList()
          .equals(other.getCardsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public Builder newBuilderForType() { return newBuilder(); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongChi> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongChi getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * <pre>
     *吃 CHI
     * </pre>
     *
     * Protobuf type {@code MahjongChi}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongChi)
            mahjong.mode.Mahjong.MahjongChiOrBuilder {
        private int bitField0_;
        private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

        // Construct using mahjong.mode.Mahjong.MahjongChi.newBuilder()
        private Builder() {
        maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongChi_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongChi_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongChi.class, mahjong.mode.Mahjong.MahjongChi.Builder.class);
        }

      public Builder clear() {
          super.clear();
          cards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
      }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.Mahjong.internal_static_MahjongChi_descriptor;
        }

        public mahjong.mode.Mahjong.MahjongChi getDefaultInstanceForType() {
            return mahjong.mode.Mahjong.MahjongChi.getDefaultInstance();
        }

        public mahjong.mode.Mahjong.MahjongChi build() {
            mahjong.mode.Mahjong.MahjongChi result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.Mahjong.MahjongChi buildPartial() {
            mahjong.mode.Mahjong.MahjongChi result = new mahjong.mode.Mahjong.MahjongChi(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
            bitField0_ = (bitField0_ & ~0x00000001);
        }
            result.cards_ = cards_;
            onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
      }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mahjong.mode.Mahjong.MahjongChi) {
          return mergeFrom((mahjong.mode.Mahjong.MahjongChi)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mahjong.mode.Mahjong.MahjongChi other) {
        if (other == mahjong.mode.Mahjong.MahjongChi.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongChi parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongChi) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
            bitField0_ |= 0x00000001;
        }
      }

        /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

        /**
         * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 1;</code>
         */
        public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addCards(int value) {
          ensureCardsIsMutable();
          cards_.add(value);
          onChanged();
          return this;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureCardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, cards_);
          onChanged();
        return this;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongChi)
    }

  }

  /**
   * <pre>
   *胡 HU
   * </pre>
   *
   * Protobuf type {@code MahjongHuResponse}
   */
  public  static final class MahjongHuResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongHuResponse)
          MahjongHuResponseOrBuilder {
      public static final int CARD_FIELD_NUMBER = 1;

      private MahjongHuResponse() {
          card_ = 0;
      }

      private static final long serialVersionUID = 0L;
    // @@protoc_insertion_point(class_scope:MahjongHuResponse)
    private static final mahjong.mode.Mahjong.MahjongHuResponse DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongHuResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongHuResponse>() {
      public MahjongHuResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongHuResponse(input, extensionRegistry);
      }
    };

    static {
      DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongHuResponse();
    }

    private int card_;
    private byte memoizedIsInitialized = -1;

      // Use MahjongHuResponse.newBuilder() to construct.
      private MahjongHuResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongHuResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
            int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
                if (!input.skipField(tag)) {
                    done = true;
                }
                break;
            }
              case 8: {

                  card_ = input.readInt32();
                  break;
              }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return mahjong.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
    }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
              java.nio.ByteBuffer data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
    }

    public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongHuResponse parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

    public static Builder newBuilder(mahjong.mode.Mahjong.MahjongHuResponse prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

      public static mahjong.mode.Mahjong.MahjongHuResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<MahjongHuResponse> parser() {
        return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongHuResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mahjong.mode.Mahjong.MahjongHuResponse.class, mahjong.mode.Mahjong.MahjongHuResponse.Builder.class);
    }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>int32 card = 1;</code>
       */
      public int getCard() {
      return card_;
    }
    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
        return true;
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
              throws java.io.IOException {
          if (card_ != 0) {
              output.writeInt32(1, card_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (card_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, card_);
      }
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
       return true;
      }
      if (!(obj instanceof mahjong.mode.Mahjong.MahjongHuResponse)) {
        return super.equals(obj);
      }
      mahjong.mode.Mahjong.MahjongHuResponse other = (mahjong.mode.Mahjong.MahjongHuResponse) obj;

      boolean result = true;
      result = result && (getCard()
          == other.getCard());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CARD_FIELD_NUMBER;
      hash = (53 * hash) + getCard();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public Builder newBuilderForType() { return newBuilder(); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongHuResponse> getParserForType() {
        return PARSER;
    }

      public mahjong.mode.Mahjong.MahjongHuResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * <pre>
     *胡 HU
     * </pre>
     *
     * Protobuf type {@code MahjongHuResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MahjongHuResponse)
        mahjong.mode.Mahjong.MahjongHuResponseOrBuilder {
        private int card_;

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        // Construct using mahjong.mode.Mahjong.MahjongHuResponse.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mahjong.mode.Mahjong.internal_static_MahjongHuResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mahjong.mode.Mahjong.MahjongHuResponse.class, mahjong.mode.Mahjong.MahjongHuResponse.Builder.class);
        }

        public Builder clear() {
            super.clear();
            card_ = 0;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mahjong.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
        }

        public mahjong.mode.Mahjong.MahjongHuResponse getDefaultInstanceForType() {
            return mahjong.mode.Mahjong.MahjongHuResponse.getDefaultInstance();
        }

        public mahjong.mode.Mahjong.MahjongHuResponse build() {
            mahjong.mode.Mahjong.MahjongHuResponse result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.Mahjong.MahjongHuResponse buildPartial() {
        mahjong.mode.Mahjong.MahjongHuResponse result = new mahjong.mode.Mahjong.MahjongHuResponse(this);
        result.card_ = card_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mahjong.mode.Mahjong.MahjongHuResponse) {
          return mergeFrom((mahjong.mode.Mahjong.MahjongHuResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

        public Builder mergeFrom(mahjong.mode.Mahjong.MahjongHuResponse other) {
            if (other == mahjong.mode.Mahjong.MahjongHuResponse.getDefaultInstance()) return this;
            if (other.getCard() != 0) {
                setCard(other.getCard());
            }
            onChanged();
            return this;
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongHuResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongHuResponse) e.getUnfinishedMessage();
            throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
              mergeFrom(parsedMessage);
          }
        }
          return this;
      }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>int32 card = 1;</code>
         */
        public int getCard() {
        return card_;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
       */
      public Builder setCard(int value) {

        card_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
       */
      public Builder clearCard() {

        card_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongHuResponse)
    }

  }

  /**
   * <pre>
   *摸牌 GET_CARD
   * </pre>
   *
   * Protobuf type {@code MahjongGetCardResponse}
   */
  public  static final class MahjongGetCardResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongGetCardResponse)
          MahjongGetCardResponseOrBuilder {
      // Use MahjongGetCardResponse.newBuilder() to construct.
    private MahjongGetCardResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MahjongGetCardResponse() {
      card_ = 0;
    }

    public static final int CARD_FIELD_NUMBER = 1;
    private static final long serialVersionUID = 0L;
      // @@protoc_insertion_point(class_scope:MahjongGetCardResponse)
      private static final mahjong.mode.Mahjong.MahjongGetCardResponse DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongGetCardResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongGetCardResponse>() {
        public MahjongGetCardResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
            return new MahjongGetCardResponse(input, extensionRegistry);
      }
    };

    static {
      DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongGetCardResponse();
    }

    private int card_;
    private byte memoizedIsInitialized = -1;

      private MahjongGetCardResponse(
              com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
          try {
              boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
                done = true;
                break;
              default: {
                  if (!input.skipField(tag)) {
                      done = true;
                  }
                  break;
              }
              case 8: {

                  card_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
          }
      }

      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
          return mahjong.mode.Mahjong.internal_static_MahjongGetCardResponse_descriptor;
      }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
        java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
    }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
              java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

    public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseDelimitedFrom(
              java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

    public static Builder newBuilder(mahjong.mode.Mahjong.MahjongGetCardResponse prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

      public static mahjong.mode.Mahjong.MahjongGetCardResponse getDefaultInstance() {
          return DEFAULT_INSTANCE;
      }

      public static com.google.protobuf.Parser<MahjongGetCardResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongGetCardResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mahjong.mode.Mahjong.MahjongGetCardResponse.class, mahjong.mode.Mahjong.MahjongGetCardResponse.Builder.class);
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
    public int getCard() {
        return card_;
    }

      public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
      }

      public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (card_ != 0) {
        output.writeInt32(1, card_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

        size = 0;
        if (card_ != 0) {
            size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, card_);
      }
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mahjong.mode.Mahjong.MahjongGetCardResponse)) {
        return super.equals(obj);
      }
      mahjong.mode.Mahjong.MahjongGetCardResponse other = (mahjong.mode.Mahjong.MahjongGetCardResponse) obj;

      boolean result = true;
      result = result && (getCard()
          == other.getCard());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CARD_FIELD_NUMBER;
      hash = (53 * hash) + getCard();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public Builder newBuilderForType() { return newBuilder(); }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongGetCardResponse> getParserForType() {
        return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongGetCardResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * <pre>
     *摸牌 GET_CARD
     * </pre>
     *
     * Protobuf type {@code MahjongGetCardResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MahjongGetCardResponse)
            mahjong.mode.Mahjong.MahjongGetCardResponseOrBuilder {
        private int card_;

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
        }

        // Construct using mahjong.mode.Mahjong.MahjongGetCardResponse.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongGetCardResponse_descriptor;
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
        return mahjong.mode.Mahjong.internal_static_MahjongGetCardResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mahjong.mode.Mahjong.MahjongGetCardResponse.class, mahjong.mode.Mahjong.MahjongGetCardResponse.Builder.class);
        }

        public Builder clear() {
            super.clear();
            card_ = 0;

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.Mahjong.internal_static_MahjongGetCardResponse_descriptor;
        }

        public mahjong.mode.Mahjong.MahjongGetCardResponse getDefaultInstanceForType() {
            return mahjong.mode.Mahjong.MahjongGetCardResponse.getDefaultInstance();
        }

        public mahjong.mode.Mahjong.MahjongGetCardResponse build() {
            mahjong.mode.Mahjong.MahjongGetCardResponse result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.Mahjong.MahjongGetCardResponse buildPartial() {
        mahjong.mode.Mahjong.MahjongGetCardResponse result = new mahjong.mode.Mahjong.MahjongGetCardResponse(this);
        result.card_ = card_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mahjong.mode.Mahjong.MahjongGetCardResponse) {
          return mergeFrom((mahjong.mode.Mahjong.MahjongGetCardResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

        public Builder mergeFrom(mahjong.mode.Mahjong.MahjongGetCardResponse other) {
            if (other == mahjong.mode.Mahjong.MahjongGetCardResponse.getDefaultInstance()) return this;
            if (other.getCard() != 0) {
                setCard(other.getCard());
            }
            onChanged();
            return this;
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongGetCardResponse parsedMessage = null;
          try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (mahjong.mode.Mahjong.MahjongGetCardResponse) e.getUnfinishedMessage();
              throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
          }
          return this;
      }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>int32 card = 1;</code>
         */
        public int getCard() {
        return card_;
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
       */
      public Builder setCard(int value) {

        card_ = value;
        onChanged();
          return this;
      }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>int32 card = 1;</code>
         */
        public Builder clearCard() {

            card_ = 0;
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongGetCardResponse)
    }

  }

  /**
   * <pre>
   *出牌 PLAY_CARD
   * </pre>
   *
   * Protobuf type {@code MahjongPlayCard}
   */
  public  static final class MahjongPlayCard extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongPlayCard)
          MahjongPlayCardOrBuilder {
      public static final int CARD_FIELD_NUMBER = 1;

      private MahjongPlayCard() {
          card_ = 0;
      }

      private static final long serialVersionUID = 0L;
    // @@protoc_insertion_point(class_scope:MahjongPlayCard)
    private static final mahjong.mode.Mahjong.MahjongPlayCard DEFAULT_INSTANCE;
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mahjong.mode.Mahjong.internal_static_MahjongPlayCard_descriptor;
    }

      private static final com.google.protobuf.Parser<MahjongPlayCard>
              PARSER = new com.google.protobuf.AbstractParser<MahjongPlayCard>() {
          public MahjongPlayCard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                  throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongPlayCard(input, extensionRegistry);
      }
    };

    static {
      DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongPlayCard();
    }

    private int card_;
    private byte memoizedIsInitialized = -1;

      // Use MahjongPlayCard.newBuilder() to construct.
      private MahjongPlayCard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
      }
    private MahjongPlayCard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
          int tag = input.readTag();
          switch (tag) {
              case 0:
                  done = true;
                  break;
              default: {
                  if (!input.skipField(tag)) {
                      done = true;
              }
              break;
            }
            case 8: {

                card_ = input.readInt32();
                break;
            }
          }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
        } finally {
            makeExtensionsImmutable();
        }
    }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
              java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
              com.google.protobuf.ByteString data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
              com.google.protobuf.ByteString data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static mahjong.mode.Mahjong.MahjongPlayCard getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

      public static com.google.protobuf.Parser<MahjongPlayCard> parser() {
      return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    public static mahjong.mode.Mahjong.MahjongPlayCard parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mahjong.mode.Mahjong.internal_static_MahjongPlayCard_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      mahjong.mode.Mahjong.MahjongPlayCard.class, mahjong.mode.Mahjong.MahjongPlayCard.Builder.class);
    }

      /**
       * <pre>
     *牌
     * </pre>
     *
     * <code>int32 card = 1;</code>
     */
      public int getCard() {
          return card_;
      }

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

      public static Builder newBuilder(mahjong.mode.Mahjong.MahjongPlayCard prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (card_ != 0) {
        output.writeInt32(1, card_);
      }
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
      return builder;
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

        size = 0;
        if (card_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(1, card_);
      }
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mahjong.mode.Mahjong.MahjongPlayCard)) {
        return super.equals(obj);
      }
      mahjong.mode.Mahjong.MahjongPlayCard other = (mahjong.mode.Mahjong.MahjongPlayCard) obj;

      boolean result = true;
      result = result && (getCard()
          == other.getCard());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + CARD_FIELD_NUMBER;
        hash = (53 * hash) + getCard();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

      public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongPlayCard> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongPlayCard getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

      /**
       * <pre>
       * 出牌 PLAY_CARD
       * </pre>
       * <p>
       * Protobuf type {@code MahjongPlayCard}
       */
      public static final class Builder extends
              com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
              // @@protoc_insertion_point(builder_implements:MahjongPlayCard)
              mahjong.mode.Mahjong.MahjongPlayCardOrBuilder {
      private int card_;

          // Construct using mahjong.mode.Mahjong.MahjongPlayCard.newBuilder()
          private Builder() {
              maybeForceBuilderInitialization();
          }

          private Builder(
                  com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
              super(parent);
              maybeForceBuilderInitialization();
          }

          public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
              return mahjong.mode.Mahjong.internal_static_MahjongPlayCard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mahjong.mode.Mahjong.internal_static_MahjongPlayCard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                    mahjong.mode.Mahjong.MahjongPlayCard.class, mahjong.mode.Mahjong.MahjongPlayCard.Builder.class);
      }

          public Builder clear() {
              super.clear();
        card_ = 0;

        return this;
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

          public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
              return mahjong.mode.Mahjong.internal_static_MahjongPlayCard_descriptor;
          }

          public mahjong.mode.Mahjong.MahjongPlayCard getDefaultInstanceForType() {
              return mahjong.mode.Mahjong.MahjongPlayCard.getDefaultInstance();
      }

      public mahjong.mode.Mahjong.MahjongPlayCard build() {
          mahjong.mode.Mahjong.MahjongPlayCard result = buildPartial();
          if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mahjong.mode.Mahjong.MahjongPlayCard buildPartial() {
        mahjong.mode.Mahjong.MahjongPlayCard result = new mahjong.mode.Mahjong.MahjongPlayCard(this);
        result.card_ = card_;
          onBuilt();
          return result;
      }

          public Builder clone() {
              return (Builder) super.clone();
          }

          public Builder setField(
                  com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

          public Builder clearOneof(
                  com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof mahjong.mode.Mahjong.MahjongPlayCard) {
              return mergeFrom((mahjong.mode.Mahjong.MahjongPlayCard) other);
          } else {
              super.mergeFrom(other);
              return this;
          }
      }

      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(mahjong.mode.Mahjong.MahjongPlayCard other) {
          if (other == mahjong.mode.Mahjong.MahjongPlayCard.getDefaultInstance()) return this;
          if (other.getCard() != 0) {
              setCard(other.getCard());
          }
          onChanged();
          return this;
      }

          public final boolean isInitialized() {
              return true;
          }

          public Builder mergeFrom(
                  com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongPlayCard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongPlayCard) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
              return this;
          }

          /**
           * <pre>
           *牌
       * </pre>
       *
       * <code>int32 card = 1;</code>
           */
          public int getCard() {
              return card_;
          }

          /**
           * <pre>
           * 牌
           * </pre>
           * <p>
           * <code>int32 card = 1;</code>
           */
          public Builder setCard(int value) {

              card_ = value;
              onChanged();
              return this;
          }

          /**
           * <pre>
           * 牌
           * </pre>
           * <p>
           * <code>int32 card = 1;</code>
           */
          public Builder clearCard() {

              card_ = 0;
              onChanged();
              return this;
          }

          public final Builder setUnknownFields(
                  final com.google.protobuf.UnknownFieldSet unknownFields) {
              return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongPlayCard)
      }

  }

    /**
     * <pre>
     * 游戏开始 发牌 START
     * </pre>
     * <p>
     * Protobuf type {@code MahjongStartResponse}
     */
    public static final class MahjongStartResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongStartResponse)
            MahjongStartResponseOrBuilder {
        public static final int BANKER_FIELD_NUMBER = 1;
        public static final int DICE_FIELD_NUMBER = 2;
        public static final int CARDS_FIELD_NUMBER = 3;
        public static final int SURPLUSCARDSSIZE_FIELD_NUMBER = 4;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongStartResponse)
        private static final mahjong.mode.Mahjong.MahjongStartResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongStartResponse>
                PARSER = new com.google.protobuf.AbstractParser<MahjongStartResponse>() {
            public MahjongStartResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongStartResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongStartResponse();
        }

        private int bitField0_;
        private int banker_;
        private java.util.List<java.lang.Integer> dice_;
        private int diceMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> cards_;

        /**
         * <pre>
         *骰子
         * </pre>
         *
         * <code>repeated uint32 dice = 2;</code>
         */
        public int getDiceCount() {
            return dice_.size();
        }

        private int cardsMemoizedSerializedSize = -1;
        private int surplusCardsSize_;
        private byte memoizedIsInitialized = -1;

        // Use MahjongStartResponse.newBuilder() to construct.
        private MahjongStartResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        /**
         * <pre>
         *牌
         * </pre>
         *
         * <code>repeated int32 cards = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        private MahjongStartResponse() {
            banker_ = 0;
            dice_ = java.util.Collections.emptyList();
            cards_ = java.util.Collections.emptyList();
            surplusCardsSize_ = 0;
        }

        private MahjongStartResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            banker_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                dice_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            dice_.add(input.readUInt32());
                            break;
                        }
                        case 18: {
                            int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                  dice_.add(input.readUInt32());
              }
                            input.popLimit(limit);
                            break;
                        }
                        case 24: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            cards_.add(input.readInt32());
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 32: {

                            surplusCardsSize_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    dice_ = java.util.Collections.unmodifiableList(dice_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongStartResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }

    public static mahjong.mode.Mahjong.MahjongStartResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

        public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(mahjong.mode.Mahjong.MahjongStartResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

        public static mahjong.mode.Mahjong.MahjongStartResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<MahjongStartResponse> parser() {
        return PARSER;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongStartResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongStartResponse.class, mahjong.mode.Mahjong.MahjongStartResponse.Builder.class);
        }

        /**
         * <pre>
         * 庄家ID
         * </pre>
         * <p>
         * <code>uint32 banker = 1;</code>
         */
        public int getBanker() {
            return banker_;
        }

        /**
         * <pre>
         * 骰子
         * </pre>
         * <p>
         * <code>repeated uint32 dice = 2;</code>
         */
        public java.util.List<java.lang.Integer>
        getDiceList() {
      return dice_;
    }

    /**
     * <pre>
     *骰子
     * </pre>
     *
     * <code>repeated uint32 dice = 2;</code>
     */
    public int getDice(int index) {
      return dice_.get(index);
    }

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 3;</code>
     */
    public int getCardsCount() {
        return cards_.size();
    }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 剩余张数
         * </pre>
         * <p>
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        public int getSurplusCardsSize() {
            return surplusCardsSize_;
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (banker_ != 0) {
                output.writeUInt32(1, banker_);
            }
            if (getDiceList().size() > 0) {
                output.writeUInt32NoTag(18);
                output.writeUInt32NoTag(diceMemoizedSerializedSize);
            }
            for (int i = 0; i < dice_.size(); i++) {
                output.writeUInt32NoTag(dice_.get(i));
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeInt32NoTag(cards_.get(i));
            }
            if (surplusCardsSize_ != 0) {
                output.writeUInt32(4, surplusCardsSize_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (banker_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, banker_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < dice_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(dice_.get(i));
                }
                size += dataSize;
                if (!getDiceList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                diceMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            if (surplusCardsSize_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, surplusCardsSize_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongStartResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongStartResponse other = (mahjong.mode.Mahjong.MahjongStartResponse) obj;

            boolean result = true;
            result = result && (getBanker()
          == other.getBanker());
      result = result && getDiceList()
          .equals(other.getDiceList());
      result = result && getCardsList()
          .equals(other.getCardsList());
      result = result && (getSurplusCardsSize()
          == other.getSurplusCardsSize());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BANKER_FIELD_NUMBER;
      hash = (53 * hash) + getBanker();
      if (getDiceCount() > 0) {
        hash = (37 * hash) + DICE_FIELD_NUMBER;
        hash = (53 * hash) + getDiceList().hashCode();
      }
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (37 * hash) + SURPLUSCARDSSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSurplusCardsSize();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongStartResponse> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongStartResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * <pre>
     *游戏开始 发牌 START
     * </pre>
     *
     * Protobuf type {@code MahjongStartResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongStartResponse)
            mahjong.mode.Mahjong.MahjongStartResponseOrBuilder {
      private int bitField0_;
      private int banker_ ;

      // Construct using mahjong.mode.Mahjong.MahjongStartResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
      }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        private java.util.List<java.lang.Integer> dice_ = java.util.Collections.emptyList();

        public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mahjong.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
      }

      public mahjong.mode.Mahjong.MahjongStartResponse getDefaultInstanceForType() {
        return mahjong.mode.Mahjong.MahjongStartResponse.getDefaultInstance();
      }
      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private int surplusCardsSize_ ;

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mahjong.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
          return (Builder) super.setField(field, value);
      }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongStartResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongStartResponse.class, mahjong.mode.Mahjong.MahjongStartResponse.Builder.class);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof mahjong.mode.Mahjong.MahjongStartResponse) {
                return mergeFrom((mahjong.mode.Mahjong.MahjongStartResponse) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder clear() {
            super.clear();
            banker_ = 0;

            dice_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            cards_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            surplusCardsSize_ = 0;

            return this;
        }

        public mahjong.mode.Mahjong.MahjongStartResponse build() {
            mahjong.mode.Mahjong.MahjongStartResponse result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public mahjong.mode.Mahjong.MahjongStartResponse buildPartial() {
            mahjong.mode.Mahjong.MahjongStartResponse result = new mahjong.mode.Mahjong.MahjongStartResponse(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.banker_ = banker_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                dice_ = java.util.Collections.unmodifiableList(dice_);
                bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.dice_ = dice_;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                cards_ = java.util.Collections.unmodifiableList(cards_);
                bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.cards_ = cards_;
            result.surplusCardsSize_ = surplusCardsSize_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public int getBanker() {
        return banker_;
      }

        public Builder mergeFrom(mahjong.mode.Mahjong.MahjongStartResponse other) {
            if (other == mahjong.mode.Mahjong.MahjongStartResponse.getDefaultInstance()) return this;
            if (other.getBanker() != 0) {
                setBanker(other.getBanker());
            }
            if (!other.dice_.isEmpty()) {
                if (dice_.isEmpty()) {
                    dice_ = other.dice_;
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    ensureDiceIsMutable();
                    dice_.addAll(other.dice_);
                }
                onChanged();
            }
            if (!other.cards_.isEmpty()) {
                if (cards_.isEmpty()) {
                    cards_ = other.cards_;
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    ensureCardsIsMutable();
                    cards_.addAll(other.cards_);
                }
                onChanged();
            }
            if (other.getSurplusCardsSize() != 0) {
                setSurplusCardsSize(other.getSurplusCardsSize());
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            mahjong.mode.Mahjong.MahjongStartResponse parsedMessage = null;
            try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mahjong.mode.Mahjong.MahjongStartResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public Builder setBanker(int value) {

          banker_ = value;
          onChanged();
          return this;
      }

        /**
         * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getDiceList() {
        return java.util.Collections.unmodifiableList(dice_);
      }

      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public Builder clearBanker() {

        banker_ = 0;
        onChanged();
        return this;
      }

      private void ensureDiceIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          dice_ = new java.util.ArrayList<java.lang.Integer>(dice_);
            bitField0_ |= 0x00000002;
        }
      }

        /**
         * <pre>
         * 骰子
         * </pre>
         * <p>
         * <code>repeated uint32 dice = 2;</code>
         */
        public int getDiceCount() {
            return dice_.size();
        }

        /**
         * <pre>
         *骰子
         * </pre>
         *
         * <code>repeated uint32 dice = 2;</code>
         */
      public int getDice(int index) {
        return dice_.get(index);
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder setDice(
          int index, int value) {
        ensureDiceIsMutable();
        dice_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder clearDice() {
        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder addDice(int value) {
          ensureDiceIsMutable();
          dice_.add(value);
          onChanged();
          return this;
      }

        /**
         * <pre>
         * 骰子
         * </pre>
         * <p>
         * <code>repeated uint32 dice = 2;</code>
         */
        public Builder addAllDice(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureDiceIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, dice_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCards(int index) {
          return cards_.get(index);
      }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public Builder setCards(
                int index, int value) {
            ensureCardsIsMutable();
            cards_.set(index, value);
            onChanged();
            return this;
        }

        private void ensureCardsIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                bitField0_ |= 0x00000004;
            }
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public Builder addCards(int value) {
            ensureCardsIsMutable();
            cards_.add(value);
            onChanged();
            return this;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public Builder addAllCards(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureCardsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                    values, cards_);
            onChanged();
            return this;
        }

        /**
         * <pre>
         *牌
         * </pre>
         *
         * <code>repeated int32 cards = 3;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
          return this;
      }

        /**
         * <pre>
         * 剩余张数
         * </pre>
         * <p>
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        public int getSurplusCardsSize() {
            return surplusCardsSize_;
        }

        /**
         * <pre>
         * 剩余张数
         * </pre>
         * <p>
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        public Builder setSurplusCardsSize(int value) {

            surplusCardsSize_ = value;
            onChanged();
            return this;
      }
      /**
       * <pre>
       *剩余张数
       * </pre>
       *
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder clearSurplusCardsSize() {

        surplusCardsSize_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


        // @@protoc_insertion_point(builder_scope:MahjongStartResponse)
    }

  }

    /**
     * <pre>
     *游戏信息  GAME_INFO
     * </pre>
     *
     * Protobuf type {@code MahjongGameInfo}
     */
    public  static final class MahjongGameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongGameInfo)
            MahjongGameInfoOrBuilder {
        // Use MahjongGameInfo.newBuilder() to construct.
        private MahjongGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        public static final int SEATS_FIELD_NUMBER = 1;
        public static final int GAMECOUNT_FIELD_NUMBER = 2;
        public static final int GAMETIMES_FIELD_NUMBER = 3;
        public static final int SURPLUSCARDSSIZE_FIELD_NUMBER = 4;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongGameInfo)
        private static final mahjong.mode.Mahjong.MahjongGameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongGameInfo>
                PARSER = new com.google.protobuf.AbstractParser<MahjongGameInfo>() {
            public MahjongGameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongGameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongGameInfo();
        }

        private int bitField0_;
        private java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo> seats_;
        private int gameCount_;
        private int gameTimes_;
        private int surplusCardsSize_;
        private byte memoizedIsInitialized = -1;

        private MahjongGameInfo() {
            seats_ = java.util.Collections.emptyList();
            gameCount_ = 0;
            gameTimes_ = 0;
            surplusCardsSize_ = 0;
        }

        private MahjongGameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                seats_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongSeatGameInfo>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            seats_.add(
                                    input.readMessage(mahjong.mode.Mahjong.MahjongSeatGameInfo.parser(), extensionRegistry));
                            break;
                        }
                        case 16: {

                            gameCount_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            gameTimes_ = input.readUInt32();
                            break;
                        }
                        case 32: {

                            surplusCardsSize_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    seats_ = java.util.Collections.unmodifiableList(seats_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongGameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongGameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<MahjongGameInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongGameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongGameInfo.class, mahjong.mode.Mahjong.MahjongGameInfo.Builder.class);
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
         */
        public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo> getSeatsList() {
            return seats_;
        }

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
        getSeatsOrBuilderList() {
            return seats_;
        }

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
         */
        public int getSeatsCount() {
            return seats_.size();
        }

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongSeatGameInfo getSeats(int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
                int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         * 当前游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameCount = 2;</code>
         */
        public int getGameCount() {
            return gameCount_;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        /**
         * <pre>
         *总局数
         * </pre>
         *
         * <code>uint32 gameTimes = 3;</code>
         */
        public int getGameTimes() {
            return gameTimes_;
        }

        /**
         * <pre>
         * 剩余张数
         * </pre>
         * <p>
         * <code>uint32 surplusCardsSize = 4;</code>
         */
        public int getSurplusCardsSize() {
            return surplusCardsSize_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < seats_.size(); i++) {
                output.writeMessage(1, seats_.get(i));
            }
            if (gameCount_ != 0) {
                output.writeUInt32(2, gameCount_);
            }
            if (gameTimes_ != 0) {
                output.writeUInt32(3, gameTimes_);
            }
            if (surplusCardsSize_ != 0) {
                output.writeUInt32(4, surplusCardsSize_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < seats_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, seats_.get(i));
            }
            if (gameCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, gameCount_);
            }
            if (gameTimes_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, gameTimes_);
            }
            if (surplusCardsSize_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, surplusCardsSize_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongGameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongGameInfo other = (mahjong.mode.Mahjong.MahjongGameInfo) obj;

            boolean result = true;
            result = result && getSeatsList()
                    .equals(other.getSeatsList());
            result = result && (getGameCount()
                    == other.getGameCount());
            result = result && (getGameTimes()
                    == other.getGameTimes());
            result = result && (getSurplusCardsSize()
                    == other.getSurplusCardsSize());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getSeatsCount() > 0) {
                hash = (37 * hash) + SEATS_FIELD_NUMBER;
                hash = (53 * hash) + getSeatsList().hashCode();
            }
            hash = (37 * hash) + GAMECOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getGameCount();
            hash = (37 * hash) + GAMETIMES_FIELD_NUMBER;
            hash = (53 * hash) + getGameTimes();
            hash = (37 * hash) + SURPLUSCARDSSIZE_FIELD_NUMBER;
            hash = (53 * hash) + getSurplusCardsSize();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MahjongGameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Mahjong.MahjongGameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 游戏信息  GAME_INFO
         * </pre>
         * <p>
         * Protobuf type {@code MahjongGameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MahjongGameInfo)
                mahjong.mode.Mahjong.MahjongGameInfoOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo> seats_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongSeatGameInfo, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder, mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder> seatsBuilder_;
            private int gameCount_;
            private int gameTimes_;
            private int surplusCardsSize_;

            // Construct using mahjong.mode.Mahjong.MahjongGameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Mahjong.internal_static_MahjongGameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Mahjong.MahjongGameInfo.class, mahjong.mode.Mahjong.MahjongGameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getSeatsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    seatsBuilder_.clear();
                }
                gameCount_ = 0;

                gameTimes_ = 0;

                surplusCardsSize_ = 0;

                return this;
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
            }

            public mahjong.mode.Mahjong.MahjongGameInfo getDefaultInstanceForType() {
                return mahjong.mode.Mahjong.MahjongGameInfo.getDefaultInstance();
            }

            public mahjong.mode.Mahjong.MahjongGameInfo build() {
                mahjong.mode.Mahjong.MahjongGameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Mahjong.MahjongGameInfo buildPartial() {
                mahjong.mode.Mahjong.MahjongGameInfo result = new mahjong.mode.Mahjong.MahjongGameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (seatsBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        seats_ = java.util.Collections.unmodifiableList(seats_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.seats_ = seats_;
                } else {
                    result.seats_ = seatsBuilder_.build();
                }
                result.gameCount_ = gameCount_;
                result.gameTimes_ = gameTimes_;
                result.surplusCardsSize_ = surplusCardsSize_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Mahjong.MahjongGameInfo) {
                    return mergeFrom((mahjong.mode.Mahjong.MahjongGameInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Mahjong.MahjongGameInfo other) {
                if (other == mahjong.mode.Mahjong.MahjongGameInfo.getDefaultInstance()) return this;
                if (seatsBuilder_ == null) {
                    if (!other.seats_.isEmpty()) {
                        if (seats_.isEmpty()) {
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureSeatsIsMutable();
                            seats_.addAll(other.seats_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.seats_.isEmpty()) {
                        if (seatsBuilder_.isEmpty()) {
                            seatsBuilder_.dispose();
                            seatsBuilder_ = null;
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            seatsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getSeatsFieldBuilder() : null;
                        } else {
                            seatsBuilder_.addAllMessages(other.seats_);
                        }
                    }
                }
                if (other.getGameCount() != 0) {
                    setGameCount(other.getGameCount());
                }
                if (other.getGameTimes() != 0) {
                    setGameTimes(other.getGameTimes());
                }
                if (other.getSurplusCardsSize() != 0) {
                    setSurplusCardsSize(other.getSurplusCardsSize());
                }
                onChanged();
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Mahjong.MahjongGameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Mahjong.MahjongGameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureSeatsIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    seats_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongSeatGameInfo>(seats_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo> getSeatsList() {
                if (seatsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(seats_);
                } else {
                    return seatsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public int getSeatsCount() {
                if (seatsBuilder_ == null) {
                    return seats_.size();
                } else {
                    return seatsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameInfo getSeats(int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.set(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder addSeats(mahjong.mode.Mahjong.MahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder addSeats(
                    mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder addAllSeats(
                    java.lang.Iterable<? extends mahjong.mode.Mahjong.MahjongSeatGameInfo> values) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, seats_);
                    onChanged();
                } else {
                    seatsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder clearSeats() {
                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    seatsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public Builder removeSeats(int index) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.remove(index);
                    onChanged();
                } else {
                    seatsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder getSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
                    int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
            getSeatsOrBuilderList() {
                if (seatsBuilder_ != null) {
                    return seatsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(seats_);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder addSeatsBuilder() {
                return getSeatsFieldBuilder().addBuilder(
                        mahjong.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder addSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().addBuilder(
                        index, mahjong.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             *座位
             * </pre>
             *
             * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder>
            getSeatsBuilderList() {
                return getSeatsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongSeatGameInfo, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder, mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
            getSeatsFieldBuilder() {
                if (seatsBuilder_ == null) {
                    seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Mahjong.MahjongSeatGameInfo, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder, mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder>(
                            seats_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    seats_ = null;
                }
                return seatsBuilder_;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 2;</code>
             */
            public int getGameCount() {
                return gameCount_;
            }

            /**
             * <pre>
             *当前游戏局数
             * </pre>
             *
             * <code>uint32 gameCount = 2;</code>
             */
            public Builder setGameCount(int value) {

                gameCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 2;</code>
             */
            public Builder clearGameCount() {

                gameCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *总局数
             * </pre>
             *
             * <code>uint32 gameTimes = 3;</code>
             */
            public int getGameTimes() {
                return gameTimes_;
            }

            /**
             * <pre>
             * 总局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 3;</code>
             */
            public Builder setGameTimes(int value) {

                gameTimes_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 3;</code>
             */
            public Builder clearGameTimes() {

                gameTimes_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 剩余张数
             * </pre>
             * <p>
             * <code>uint32 surplusCardsSize = 4;</code>
             */
            public int getSurplusCardsSize() {
                return surplusCardsSize_;
            }

            /**
             * <pre>
             * 剩余张数
             * </pre>
             * <p>
             * <code>uint32 surplusCardsSize = 4;</code>
             */
            public Builder setSurplusCardsSize(int value) {

                surplusCardsSize_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 剩余张数
             * </pre>
             * <p>
             * <code>uint32 surplusCardsSize = 4;</code>
             */
            public Builder clearSurplusCardsSize() {

                surplusCardsSize_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:MahjongGameInfo)
        }

    }

    /**
     * <pre>
     * 玩家游戏信息
     * </pre>
     * <p>
     * Protobuf type {@code MahjongSeatGameInfo}
     */
    public static final class MahjongSeatGameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongSeatGameInfo)
            MahjongSeatGameInfoOrBuilder {
        // Use MahjongSeatGameInfo.newBuilder() to construct.
        private MahjongSeatGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private MahjongSeatGameInfo() {
            iD_ = 0;
            initialCards_ = java.util.Collections.emptyList();
            cards_ = java.util.Collections.emptyList();
            cardsSize_ = 0;
            pengCards_ = java.util.Collections.emptyList();
            anGangCards_ = java.util.Collections.emptyList();
            mingGangCards_ = java.util.Collections.emptyList();
            chiCards_ = java.util.Collections.emptyList();
            playedCards_ = java.util.Collections.emptyList();
            isRobot_ = false;
        }

        public static final int ID_FIELD_NUMBER = 1;
        public static final int INITIALCARDS_FIELD_NUMBER = 2;
        public static final int CARDS_FIELD_NUMBER = 3;
        public static final int CARDSSIZE_FIELD_NUMBER = 4;
        public static final int PENGCARDS_FIELD_NUMBER = 5;
        public static final int ANGANGCARDS_FIELD_NUMBER = 6;
        public static final int MINGGANGCARDS_FIELD_NUMBER = 7;
        public static final int CHICARDS_FIELD_NUMBER = 8;
        public static final int PLAYEDCARDS_FIELD_NUMBER = 9;
        public static final int ISROBOT_FIELD_NUMBER = 10;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongSeatGameInfo)
        private static final mahjong.mode.Mahjong.MahjongSeatGameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongSeatGameInfo>
                PARSER = new com.google.protobuf.AbstractParser<MahjongSeatGameInfo>() {
            public MahjongSeatGameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongSeatGameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongSeatGameInfo();
        }

        private int bitField0_;
        private int iD_;
        private java.util.List<java.lang.Integer> initialCards_;
        private int initialCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private int cardsSize_;
        private java.util.List<java.lang.Integer> pengCards_;
        private int pengCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> anGangCards_;
        private int anGangCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> mingGangCards_;
        private int mingGangCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> chiCards_;
        private int chiCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> playedCards_;
        private int playedCardsMemoizedSerializedSize = -1;
        private boolean isRobot_;
        private byte memoizedIsInitialized = -1;

        /**
         * <pre>
         *暗杠的牌
         * </pre>
         *
         * <code>repeated int32 anGangCards = 6;</code>
         */
        public int getAnGangCards(int index) {
            return anGangCards_.get(index);
        }

        private MahjongSeatGameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            initialCards_.add(input.readInt32());
                            break;
                        }
                        case 18: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                initialCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 24: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            cards_.add(input.readInt32());
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 32: {

                            cardsSize_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            pengCards_.add(input.readInt32());
                            break;
                        }
                        case 42: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                pengCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            anGangCards_.add(input.readInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                anGangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            mingGangCards_.add(input.readInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                mingGangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            chiCards_.add(input.readInt32());
                            break;
                        }
                        case 66: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                chiCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 72: {
                            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000100;
                            }
                            playedCards_.add(input.readInt32());
                            break;
                        }
                        case 74: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000100;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                playedCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 80: {

                            isRobot_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
                }
                if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                }
                if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                    playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        /**
         * <pre>
         * 明杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 mingGangCards = 7;</code>
         */
        public int getMingGangCards(int index) {
            return mingGangCards_.get(index);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongSeatGameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongSeatGameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<MahjongSeatGameInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongSeatGameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongSeatGameInfo.class, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder.class);
        }

        /**
         * <pre>
         *ID
         * </pre>
         *
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         *初始手牌
         * </pre>
         *
         * <code>repeated int32 initialCards = 2;</code>
         */
        public java.util.List<java.lang.Integer>
        getInitialCardsList() {
            return initialCards_;
        }

        /**
         * <pre>
         *初始手牌
         * </pre>
         *
         * <code>repeated int32 initialCards = 2;</code>
         */
        public int getInitialCardsCount() {
            return initialCards_.size();
        }

        /**
         * <pre>
         *初始手牌
         * </pre>
         *
         * <code>repeated int32 initialCards = 2;</code>
         */
        public int getInitialCards(int index) {
            return initialCards_.get(index);
        }

        /**
         * <pre>
         *当前手牌(如果是其他玩家的,就没有)
         * </pre>
         *
         * <code>repeated int32 cards = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <pre>
         *当前手牌(如果是其他玩家的,就没有)
         * </pre>
         *
         * <code>repeated int32 cards = 3;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         *其他玩家手牌数量
         * </pre>
         *
         * <code>uint32 cardsSize = 4;</code>
         */
        public int getCardsSize() {
            return cardsSize_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getPengCardsList() {
            return pengCards_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public int getPengCardsCount() {
            return pengCards_.size();
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public int getPengCards(int index) {
            return pengCards_.get(index);
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 anGangCards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getAnGangCardsList() {
            return anGangCards_;
        }

        /**
         * <pre>
         *暗杠的牌
         * </pre>
         *
         * <code>repeated int32 anGangCards = 6;</code>
         */
        public int getAnGangCardsCount() {
            return anGangCards_.size();
        }

        /**
         * <pre>
         *明杠的牌
         * </pre>
         *
         * <code>repeated int32 mingGangCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getMingGangCardsList() {
            return mingGangCards_;
        }

        /**
         * <pre>
         *明杠的牌
         * </pre>
         *
         * <code>repeated int32 mingGangCards = 7;</code>
         */
        public int getMingGangCardsCount() {
            return mingGangCards_.size();
        }

        /**
         * <pre>
         *吃的牌
         * </pre>
         *
         * <code>repeated int32 chiCards = 8;</code>
         */
        public java.util.List<java.lang.Integer>
        getChiCardsList() {
            return chiCards_;
        }

        /**
         * <pre>
         *吃的牌
         * </pre>
         *
         * <code>repeated int32 chiCards = 8;</code>
         */
        public int getChiCardsCount() {
            return chiCards_.size();
        }

        /**
         * <pre>
         *吃的牌
         * </pre>
         *
         * <code>repeated int32 chiCards = 8;</code>
         */
        public int getChiCards(int index) {
            return chiCards_.get(index);
        }

        /**
         * <pre>
         *出过的牌
         * </pre>
         *
         * <code>repeated int32 playedCards = 9;</code>
         */
        public java.util.List<java.lang.Integer>
        getPlayedCardsList() {
            return playedCards_;
        }

        /**
         * <pre>
         *出过的牌
         * </pre>
         *
         * <code>repeated int32 playedCards = 9;</code>
         */
        public int getPlayedCardsCount() {
            return playedCards_.size();
        }

        /**
         * <pre>
         *出过的牌
         * </pre>
         *
         * <code>repeated int32 playedCards = 9;</code>
         */
        public int getPlayedCards(int index) {
            return playedCards_.get(index);
        }

        /**
         * <pre>
         * 是否托管
         * </pre>
         * <p>
         * <code>bool isRobot = 10;</code>
         */
        public boolean getIsRobot() {
            return isRobot_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (getInitialCardsList().size() > 0) {
                output.writeUInt32NoTag(18);
                output.writeUInt32NoTag(initialCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < initialCards_.size(); i++) {
                output.writeInt32NoTag(initialCards_.get(i));
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeInt32NoTag(cards_.get(i));
            }
            if (cardsSize_ != 0) {
                output.writeUInt32(4, cardsSize_);
            }
            if (getPengCardsList().size() > 0) {
                output.writeUInt32NoTag(42);
                output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < pengCards_.size(); i++) {
                output.writeInt32NoTag(pengCards_.get(i));
            }
            if (getAnGangCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(anGangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < anGangCards_.size(); i++) {
                output.writeInt32NoTag(anGangCards_.get(i));
            }
            if (getMingGangCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(mingGangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < mingGangCards_.size(); i++) {
                output.writeInt32NoTag(mingGangCards_.get(i));
            }
            if (getChiCardsList().size() > 0) {
                output.writeUInt32NoTag(66);
                output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < chiCards_.size(); i++) {
                output.writeInt32NoTag(chiCards_.get(i));
            }
            if (getPlayedCardsList().size() > 0) {
                output.writeUInt32NoTag(74);
                output.writeUInt32NoTag(playedCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < playedCards_.size(); i++) {
                output.writeInt32NoTag(playedCards_.get(i));
            }
            if (isRobot_ != false) {
                output.writeBool(10, isRobot_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < initialCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(initialCards_.get(i));
                }
                size += dataSize;
                if (!getInitialCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                initialCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            if (cardsSize_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, cardsSize_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < pengCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(pengCards_.get(i));
                }
                size += dataSize;
                if (!getPengCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                pengCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < anGangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(anGangCards_.get(i));
                }
                size += dataSize;
                if (!getAnGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                anGangCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < mingGangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(mingGangCards_.get(i));
                }
                size += dataSize;
                if (!getMingGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                mingGangCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < chiCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(chiCards_.get(i));
                }
                size += dataSize;
                if (!getChiCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                chiCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < playedCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(playedCards_.get(i));
                }
                size += dataSize;
                if (!getPlayedCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                playedCardsMemoizedSerializedSize = dataSize;
            }
            if (isRobot_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(10, isRobot_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongSeatGameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongSeatGameInfo other = (mahjong.mode.Mahjong.MahjongSeatGameInfo) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && getInitialCardsList()
                    .equals(other.getInitialCardsList());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && (getCardsSize()
                    == other.getCardsSize());
            result = result && getPengCardsList()
                    .equals(other.getPengCardsList());
            result = result && getAnGangCardsList()
                    .equals(other.getAnGangCardsList());
            result = result && getMingGangCardsList()
                    .equals(other.getMingGangCardsList());
            result = result && getChiCardsList()
                    .equals(other.getChiCardsList());
            result = result && getPlayedCardsList()
                    .equals(other.getPlayedCardsList());
            result = result && (getIsRobot()
                    == other.getIsRobot());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            if (getInitialCardsCount() > 0) {
                hash = (37 * hash) + INITIALCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getInitialCardsList().hashCode();
            }
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            hash = (37 * hash) + CARDSSIZE_FIELD_NUMBER;
            hash = (53 * hash) + getCardsSize();
            if (getPengCardsCount() > 0) {
                hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPengCardsList().hashCode();
            }
            if (getAnGangCardsCount() > 0) {
                hash = (37 * hash) + ANGANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getAnGangCardsList().hashCode();
            }
            if (getMingGangCardsCount() > 0) {
                hash = (37 * hash) + MINGGANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getMingGangCardsList().hashCode();
            }
            if (getChiCardsCount() > 0) {
                hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
                hash = (53 * hash) + getChiCardsList().hashCode();
            }
            if (getPlayedCardsCount() > 0) {
                hash = (37 * hash) + PLAYEDCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPlayedCardsList().hashCode();
            }
            hash = (37 * hash) + ISROBOT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getIsRobot());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() { return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MahjongSeatGameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Mahjong.MahjongSeatGameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 玩家游戏信息
         * </pre>
         * <p>
         * Protobuf type {@code MahjongSeatGameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MahjongSeatGameInfo)
                mahjong.mode.Mahjong.MahjongSeatGameInfoOrBuilder {
            private int bitField0_;
            private int iD_;
            private java.util.List<java.lang.Integer> initialCards_ = java.util.Collections.emptyList();

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private int cardsSize_;
            private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> anGangCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> mingGangCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();

            public Builder clone() {
                return (Builder) super.clone();
            }

            private java.util.List<java.lang.Integer> playedCards_ = java.util.Collections.emptyList();
            private boolean isRobot_ ;

            // Construct using mahjong.mode.Mahjong.MahjongSeatGameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Mahjong.internal_static_MahjongSeatGameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Mahjong.MahjongSeatGameInfo.class, mahjong.mode.Mahjong.MahjongSeatGameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                cardsSize_ = 0;

                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                anGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                mingGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000100);
                isRobot_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
            }

            public mahjong.mode.Mahjong.MahjongSeatGameInfo getDefaultInstanceForType() {
                return mahjong.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance();
            }

            public mahjong.mode.Mahjong.MahjongSeatGameInfo build() {
                mahjong.mode.Mahjong.MahjongSeatGameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Mahjong.MahjongSeatGameInfo buildPartial() {
                mahjong.mode.Mahjong.MahjongSeatGameInfo result = new mahjong.mode.Mahjong.MahjongSeatGameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.initialCards_ = initialCards_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.cards_ = cards_;
                result.cardsSize_ = cardsSize_;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                    bitField0_ = (bitField0_ & ~0x00000010);
                }
                result.pengCards_ = pengCards_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.anGangCards_ = anGangCards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.mingGangCards_ = mingGangCards_;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                    bitField0_ = (bitField0_ & ~0x00000080);
                }
                result.chiCards_ = chiCards_;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                    playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
                    bitField0_ = (bitField0_ & ~0x00000100);
                }
                result.playedCards_ = playedCards_;
                result.isRobot_ = isRobot_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Mahjong.MahjongSeatGameInfo) {
                    return mergeFrom((mahjong.mode.Mahjong.MahjongSeatGameInfo)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Mahjong.MahjongSeatGameInfo other) {
                if (other == mahjong.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (!other.initialCards_.isEmpty()) {
                    if (initialCards_.isEmpty()) {
                        initialCards_ = other.initialCards_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureInitialCardsIsMutable();
                        initialCards_.addAll(other.initialCards_);
                    }
                    onChanged();
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (other.getCardsSize() != 0) {
                    setCardsSize(other.getCardsSize());
                }
                if (!other.pengCards_.isEmpty()) {
                    if (pengCards_.isEmpty()) {
                        pengCards_ = other.pengCards_;
                        bitField0_ = (bitField0_ & ~0x00000010);
                    } else {
                        ensurePengCardsIsMutable();
                        pengCards_.addAll(other.pengCards_);
                    }
                    onChanged();
                }
                if (!other.anGangCards_.isEmpty()) {
                    if (anGangCards_.isEmpty()) {
                        anGangCards_ = other.anGangCards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureAnGangCardsIsMutable();
                        anGangCards_.addAll(other.anGangCards_);
                    }
                    onChanged();
                }
                if (!other.mingGangCards_.isEmpty()) {
                    if (mingGangCards_.isEmpty()) {
                        mingGangCards_ = other.mingGangCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureMingGangCardsIsMutable();
                        mingGangCards_.addAll(other.mingGangCards_);
                    }
                    onChanged();
                }
                if (!other.chiCards_.isEmpty()) {
                    if (chiCards_.isEmpty()) {
                        chiCards_ = other.chiCards_;
                        bitField0_ = (bitField0_ & ~0x00000080);
                    } else {
                        ensureChiCardsIsMutable();
                        chiCards_.addAll(other.chiCards_);
                    }
                    onChanged();
                }
                if (!other.playedCards_.isEmpty()) {
                    if (playedCards_.isEmpty()) {
                        playedCards_ = other.playedCards_;
                        bitField0_ = (bitField0_ & ~0x00000100);
                    } else {
                        ensurePlayedCardsIsMutable();
                        playedCards_.addAll(other.playedCards_);
                    }
                    onChanged();
                }
                if (other.getIsRobot() != false) {
                    setIsRobot(other.getIsRobot());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Mahjong.MahjongSeatGameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Mahjong.MahjongSeatGameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder clearInitialCards() {
                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * ID
             * </pre>
             * <p>
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            private void ensureInitialCardsIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = new java.util.ArrayList<java.lang.Integer>(initialCards_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <pre>
             * 初始手牌
             * </pre>
             * <p>
             * <code>repeated int32 initialCards = 2;</code>
             */
            public java.util.List<java.lang.Integer>
            getInitialCardsList() {
                return java.util.Collections.unmodifiableList(initialCards_);
            }

            /**
             * <pre>
             * 初始手牌
             * </pre>
             * <p>
             * <code>repeated int32 initialCards = 2;</code>
             */
            public int getInitialCardsCount() {
                return initialCards_.size();
            }

            /**
             * <pre>
             * 初始手牌
             * </pre>
             * <p>
             * <code>repeated int32 initialCards = 2;</code>
             */
            public int getInitialCards(int index) {
                return initialCards_.get(index);
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder setInitialCards(
                    int index, int value) {
                ensureInitialCardsIsMutable();
                initialCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 初始手牌
             * </pre>
             * <p>
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder addInitialCards(int value) {
                ensureInitialCardsIsMutable();
                initialCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder addAllInitialCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureInitialCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, initialCards_);
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <pre>
             * 其他玩家手牌数量
             * </pre>
             * <p>
             * <code>uint32 cardsSize = 4;</code>
             */
            public int getCardsSize() {
                return cardsSize_;
            }

            /**
             * <pre>
             * 当前手牌(如果是其他玩家的,就没有)
             * </pre>
             * <p>
             * <code>repeated int32 cards = 3;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <pre>
             * 当前手牌(如果是其他玩家的,就没有)
             * </pre>
             * <p>
             * <code>repeated int32 cards = 3;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前手牌(如果是其他玩家的,就没有)
             * </pre>
             * <p>
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前手牌(如果是其他玩家的,就没有)
             * </pre>
             * <p>
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *其他玩家手牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder setCardsSize(int value) {

                cardsSize_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 其他玩家手牌数量
             * </pre>
             * <p>
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder clearCardsSize() {

                cardsSize_ = 0;
                onChanged();
                return this;
            }

            private void ensurePengCardsIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
                    bitField0_ |= 0x00000010;
                }
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public java.util.List<java.lang.Integer>
            getPengCardsList() {
                return java.util.Collections.unmodifiableList(pengCards_);
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public int getPengCardsCount() {
                return pengCards_.size();
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public int getPengCards(int index) {
                return pengCards_.get(index);
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder setPengCards(
                    int index, int value) {
                ensurePengCardsIsMutable();
                pengCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder addPengCards(int value) {
                ensurePengCardsIsMutable();
                pengCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder addAllPengCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePengCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, pengCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 碰的牌
             * </pre>
             * <p>
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder clearPengCards() {
                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                onChanged();
                return this;
            }

            private void ensureAnGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    anGangCards_ = new java.util.ArrayList<java.lang.Integer>(anGangCards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getAnGangCardsList() {
                return java.util.Collections.unmodifiableList(anGangCards_);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public int getAnGangCardsCount() {
                return anGangCards_.size();
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public int getAnGangCards(int index) {
                return anGangCards_.get(index);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public Builder setAnGangCards(
                    int index, int value) {
                ensureAnGangCardsIsMutable();
                anGangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public Builder addAnGangCards(int value) {
                ensureAnGangCardsIsMutable();
                anGangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public Builder addAllAnGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureAnGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, anGangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 6;</code>
             */
            public Builder clearAnGangCards() {
                anGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureMingGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    mingGangCards_ = new java.util.ArrayList<java.lang.Integer>(mingGangCards_);
                    bitField0_ |= 0x00000040;
                }
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public java.util.List<java.lang.Integer>
            getMingGangCardsList() {
                return java.util.Collections.unmodifiableList(mingGangCards_);
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public int getMingGangCardsCount() {
                return mingGangCards_.size();
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public int getMingGangCards(int index) {
                return mingGangCards_.get(index);
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public Builder clearMingGangCards() {
                mingGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public Builder setMingGangCards(
                    int index, int value) {
                ensureMingGangCardsIsMutable();
                mingGangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public Builder addMingGangCards(int value) {
                ensureMingGangCardsIsMutable();
                mingGangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 mingGangCards = 7;</code>
             */
            public Builder addAllMingGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureMingGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, mingGangCards_);
                onChanged();
                return this;
            }

            private void ensureChiCardsIsMutable() {
                if (!((bitField0_ & 0x00000080) == 0x00000080)) {
                    chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
                    bitField0_ |= 0x00000080;
                }
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 8;</code>
             */
            public java.util.List<java.lang.Integer>
            getChiCardsList() {
                return java.util.Collections.unmodifiableList(chiCards_);
            }

            /**
             * <pre>
             * 吃的牌
             * </pre>
             * <p>
             * <code>repeated int32 chiCards = 8;</code>
             */
            public int getChiCardsCount() {
                return chiCards_.size();
            }

            /**
             * <pre>
             * 吃的牌
             * </pre>
             * <p>
             * <code>repeated int32 chiCards = 8;</code>
             */
            public int getChiCards(int index) {
                return chiCards_.get(index);
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 8;</code>
             */
            public Builder setChiCards(
                    int index, int value) {
                ensureChiCardsIsMutable();
                chiCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 8;</code>
             */
            public Builder addChiCards(int value) {
                ensureChiCardsIsMutable();
                chiCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 8;</code>
             */
            public Builder addAllChiCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureChiCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, chiCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 8;</code>
             */
            public Builder clearChiCards() {
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                onChanged();
                return this;
            }

            private void ensurePlayedCardsIsMutable() {
                if (!((bitField0_ & 0x00000100) == 0x00000100)) {
                    playedCards_ = new java.util.ArrayList<java.lang.Integer>(playedCards_);
                    bitField0_ |= 0x00000100;
                }
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 9;</code>
             */
            public java.util.List<java.lang.Integer>
            getPlayedCardsList() {
                return java.util.Collections.unmodifiableList(playedCards_);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 9;</code>
             */
            public int getPlayedCardsCount() {
                return playedCards_.size();
            }

            /**
             * <pre>
             * 出过的牌
             * </pre>
             * <p>
             * <code>repeated int32 playedCards = 9;</code>
             */
            public int getPlayedCards(int index) {
                return playedCards_.get(index);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 9;</code>
             */
            public Builder setPlayedCards(
                    int index, int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 9;</code>
             */
            public Builder addPlayedCards(int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 出过的牌
             * </pre>
             * <p>
             * <code>repeated int32 playedCards = 9;</code>
             */
            public Builder addAllPlayedCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePlayedCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, playedCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 9;</code>
             */
            public Builder clearPlayedCards() {
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000100);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *是否托管
             * </pre>
             *
             * <code>bool isRobot = 10;</code>
             */
            public boolean getIsRobot() {
                return isRobot_;
            }

            /**
             * <pre>
             *是否托管
             * </pre>
             *
             * <code>bool isRobot = 10;</code>
             */
            public Builder setIsRobot(boolean value) {

                isRobot_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *是否托管
             * </pre>
             *
             * <code>bool isRobot = 10;</code>
             */
            public Builder clearIsRobot() {

                isRobot_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:MahjongSeatGameInfo)
        }

    }

    /**
     * <pre>
     *当局游戏结果 RESULT
     * </pre>
     *
     * Protobuf type {@code MahjongResultResponse}
     */
    public  static final class MahjongResultResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongResultResponse)
            MahjongResultResponseOrBuilder {
        public static final int USERRESULT_FIELD_NUMBER = 1;
        public static final int READYTIMECOUNTER_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongResultResponse)
        private static final mahjong.mode.Mahjong.MahjongResultResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongResultResponse>
                PARSER = new com.google.protobuf.AbstractParser<MahjongResultResponse>() {
            public MahjongResultResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongResultResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongResultResponse();
        }

        private int bitField0_;
        private java.util.List<mahjong.mode.Mahjong.MahjongUserResult> userResult_;
        private int readyTimeCounter_;
        private byte memoizedIsInitialized = -1;

        // Use MahjongResultResponse.newBuilder() to construct.
        private MahjongResultResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private MahjongResultResponse() {
            userResult_ = java.util.Collections.emptyList();
            readyTimeCounter_ = 0;
        }

        private MahjongResultResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                userResult_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongUserResult>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            userResult_.add(
                                    input.readMessage(mahjong.mode.Mahjong.MahjongUserResult.parser(), extensionRegistry));
                            break;
                        }
                        case 16: {

                            readyTimeCounter_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = java.util.Collections.unmodifiableList(userResult_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongResultResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongResultResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<MahjongResultResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongResultResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongResultResponse.class, mahjong.mode.Mahjong.MahjongResultResponse.Builder.class);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .MahjongUserResult userResult = 1;</code>
         */
        public java.util.List<mahjong.mode.Mahjong.MahjongUserResult> getUserResultList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .MahjongUserResult userResult = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Mahjong.MahjongUserResultOrBuilder>
        getUserResultOrBuilderList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .MahjongUserResult userResult = 1;</code>
         */
        public int getUserResultCount() {
            return userResult_.size();
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .MahjongUserResult userResult = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongUserResult getUserResult(int index) {
            return userResult_.get(index);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .MahjongUserResult userResult = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
                int index) {
            return userResult_.get(index);
        }

        /**
         * <pre>
         *准备倒计时
         * </pre>
         *
         * <code>int32 readyTimeCounter = 2;</code>
         */
        public int getReadyTimeCounter() {
            return readyTimeCounter_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < userResult_.size(); i++) {
                output.writeMessage(1, userResult_.get(i));
            }
            if (readyTimeCounter_ != 0) {
                output.writeInt32(2, readyTimeCounter_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < userResult_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, userResult_.get(i));
            }
            if (readyTimeCounter_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, readyTimeCounter_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongResultResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongResultResponse other = (mahjong.mode.Mahjong.MahjongResultResponse) obj;

            boolean result = true;
            result = result && getUserResultList()
                    .equals(other.getUserResultList());
            result = result && (getReadyTimeCounter()
                    == other.getReadyTimeCounter());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getUserResultCount() > 0) {
                hash = (37 * hash) + USERRESULT_FIELD_NUMBER;
                hash = (53 * hash) + getUserResultList().hashCode();
            }
            hash = (37 * hash) + READYTIMECOUNTER_FIELD_NUMBER;
            hash = (53 * hash) + getReadyTimeCounter();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MahjongResultResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Mahjong.MahjongResultResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         *当局游戏结果 RESULT
         * </pre>
         *
         * Protobuf type {@code MahjongResultResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MahjongResultResponse)
                mahjong.mode.Mahjong.MahjongResultResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Mahjong.MahjongUserResult> userResult_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongUserResult, mahjong.mode.Mahjong.MahjongUserResult.Builder, mahjong.mode.Mahjong.MahjongUserResultOrBuilder> userResultBuilder_;
            private int readyTimeCounter_;

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getUserResultFieldBuilder();
                }
            }

            // Construct using mahjong.mode.Mahjong.MahjongResultResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Mahjong.internal_static_MahjongResultResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Mahjong.MahjongResultResponse.class, mahjong.mode.Mahjong.MahjongResultResponse.Builder.class);
            }

            public Builder clear() {
                super.clear();
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    userResultBuilder_.clear();
                }
                readyTimeCounter_ = 0;

                return this;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
            }

            public mahjong.mode.Mahjong.MahjongResultResponse getDefaultInstanceForType() {
                return mahjong.mode.Mahjong.MahjongResultResponse.getDefaultInstance();
            }

            public mahjong.mode.Mahjong.MahjongResultResponse build() {
                mahjong.mode.Mahjong.MahjongResultResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Mahjong.MahjongResultResponse buildPartial() {
                mahjong.mode.Mahjong.MahjongResultResponse result = new mahjong.mode.Mahjong.MahjongResultResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (userResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        userResult_ = java.util.Collections.unmodifiableList(userResult_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.userResult_ = userResult_;
                } else {
                    result.userResult_ = userResultBuilder_.build();
                }
                result.readyTimeCounter_ = readyTimeCounter_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Mahjong.MahjongResultResponse) {
                    return mergeFrom((mahjong.mode.Mahjong.MahjongResultResponse)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Mahjong.MahjongResultResponse other) {
                if (other == mahjong.mode.Mahjong.MahjongResultResponse.getDefaultInstance()) return this;
                if (userResultBuilder_ == null) {
                    if (!other.userResult_.isEmpty()) {
                        if (userResult_.isEmpty()) {
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureUserResultIsMutable();
                            userResult_.addAll(other.userResult_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.userResult_.isEmpty()) {
                        if (userResultBuilder_.isEmpty()) {
                            userResultBuilder_.dispose();
                            userResultBuilder_ = null;
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            userResultBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getUserResultFieldBuilder() : null;
                        } else {
                            userResultBuilder_.addAllMessages(other.userResult_);
                        }
                    }
                }
                if (other.getReadyTimeCounter() != 0) {
                    setReadyTimeCounter(other.getReadyTimeCounter());
                }
                onChanged();
                return this;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Mahjong.MahjongResultResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Mahjong.MahjongResultResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureUserResultIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongUserResult>(userResult_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public int getUserResultCount() {
                if (userResultBuilder_ == null) {
                    return userResult_.size();
                } else {
                    return userResultBuilder_.getCount();
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.MahjongUserResult> getUserResultList() {
                if (userResultBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(userResult_);
                } else {
                    return userResultBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongUserResult getUserResult(int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Mahjong.MahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.set(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(mahjong.mode.Mahjong.MahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    mahjong.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Mahjong.MahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder addAllUserResult(
                    java.lang.Iterable<? extends mahjong.mode.Mahjong.MahjongUserResult> values) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, userResult_);
                    onChanged();
                } else {
                    userResultBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder removeUserResult(int index) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.remove(index);
                    onChanged();
                } else {
                    userResultBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public Builder clearUserResult() {
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    userResultBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongUserResult.Builder getUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
                    int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongUserResult.Builder addUserResultBuilder() {
                return getUserResultFieldBuilder().addBuilder(
                        mahjong.mode.Mahjong.MahjongUserResult.getDefaultInstance());
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Mahjong.MahjongUserResultOrBuilder>
            getUserResultOrBuilderList() {
                if (userResultBuilder_ != null) {
                    return userResultBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(userResult_);
                }
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongUserResult.Builder addUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().addBuilder(
                        index, mahjong.mode.Mahjong.MahjongUserResult.getDefaultInstance());
            }

            /**
             * <pre>
             *用户结算
             * </pre>
             *
             * <code>repeated .MahjongUserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.MahjongUserResult.Builder>
            getUserResultBuilderList() {
                return getUserResultFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongUserResult, mahjong.mode.Mahjong.MahjongUserResult.Builder, mahjong.mode.Mahjong.MahjongUserResultOrBuilder>
            getUserResultFieldBuilder() {
                if (userResultBuilder_ == null) {
                    userResultBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Mahjong.MahjongUserResult, mahjong.mode.Mahjong.MahjongUserResult.Builder, mahjong.mode.Mahjong.MahjongUserResultOrBuilder>(
                            userResult_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    userResult_ = null;
                }
                return userResultBuilder_;
            }

            /**
             * <pre>
             *准备倒计时
             * </pre>
             *
             * <code>int32 readyTimeCounter = 2;</code>
             */
            public int getReadyTimeCounter() {
                return readyTimeCounter_;
            }

            /**
             * <pre>
             *准备倒计时
             * </pre>
             *
             * <code>int32 readyTimeCounter = 2;</code>
             */
            public Builder setReadyTimeCounter(int value) {

                readyTimeCounter_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *准备倒计时
             * </pre>
             *
             * <code>int32 readyTimeCounter = 2;</code>
             */
            public Builder clearReadyTimeCounter() {

                readyTimeCounter_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:MahjongResultResponse)
        }

    }

    /**
     * <pre>
     * 单个人结算
     * </pre>
     * <p>
     * Protobuf type {@code MahjongUserResult}
     */
    public static final class MahjongUserResult extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongUserResult)
            MahjongUserResultOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int CARDSCORE_FIELD_NUMBER = 2;
        public static final int SCORETYPES_FIELD_NUMBER = 3;
        public static final int GANGSCORE_FIELD_NUMBER = 4;

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
        }

        public static final int MASCORE_FIELD_NUMBER = 5;
        public static final int CARDS_FIELD_NUMBER = 6;
        public static final int CHICARDS_FIELD_NUMBER = 7;
        public static final int PENGCARDS_FIELD_NUMBER = 8;
        public static final int ANGANGCARDS_FIELD_NUMBER = 9;
        public static final int MINGGANGCARDS_FIELD_NUMBER = 10;
        public static final int WINORLOSE_FIELD_NUMBER = 11;
        public static final int SCORE_FIELD_NUMBER = 12;
        public static final int MACARD_FIELD_NUMBER = 13;
        private static final com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, mahjong.mode.Mahjong.ScoreType> scoreTypes_converter_ =
                new com.google.protobuf.Internal.ListAdapter.Converter<
                        java.lang.Integer, mahjong.mode.Mahjong.ScoreType>() {
                    public mahjong.mode.Mahjong.ScoreType convert(java.lang.Integer from) {
                        mahjong.mode.Mahjong.ScoreType result = mahjong.mode.Mahjong.ScoreType.valueOf(from);
                        return result == null ? mahjong.mode.Mahjong.ScoreType.UNRECOGNIZED : result;
                    }
                };
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongUserResult)
        private static final mahjong.mode.Mahjong.MahjongUserResult DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongUserResult>
                PARSER = new com.google.protobuf.AbstractParser<MahjongUserResult>() {
            public MahjongUserResult parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongUserResult(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongUserResult();
        }

        private int bitField0_;
        private int iD_;
        private int cardScore_;
        private java.util.List<java.lang.Integer> scoreTypes_;
        private int scoreTypesMemoizedSerializedSize;
        private int gangScore_;
        private int maScore_;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> chiCards_;
        private int chiCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> pengCards_;
        private int pengCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> anGangCards_;
        private int anGangCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> mingGangCards_;
        private int mingGangCardsMemoizedSerializedSize = -1;
        private int winOrLose_;

        /**
         * <pre>
         * 吃牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public int getChiCardsCount() {
            return chiCards_.size();
        }

        private int score_;
        private java.util.List<java.lang.Integer> maCard_;
        private int maCardMemoizedSerializedSize = -1;
        private byte memoizedIsInitialized = -1;

        // Use MahjongUserResult.newBuilder() to construct.
        private MahjongUserResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private MahjongUserResult() {
            iD_ = 0;
            cardScore_ = 0;
            scoreTypes_ = java.util.Collections.emptyList();
            gangScore_ = 0;
            maScore_ = 0;
            cards_ = java.util.Collections.emptyList();
            chiCards_ = java.util.Collections.emptyList();
            pengCards_ = java.util.Collections.emptyList();
            anGangCards_ = java.util.Collections.emptyList();
            mingGangCards_ = java.util.Collections.emptyList();
            winOrLose_ = 0;
            score_ = 0;
            maCard_ = java.util.Collections.emptyList();
        }

        /**
         * <pre>
         * 碰牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 8;</code>
         */
        public int getPengCards(int index) {
            return pengCards_.get(index);
        }

        private MahjongUserResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            cardScore_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            scoreTypes_.add(rawValue);
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int oldLimit = input.pushLimit(length);
                            while(input.getBytesUntilLimit() > 0) {
                                int rawValue = input.readEnum();
                                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                    mutable_bitField0_ |= 0x00000004;
                                }
                                scoreTypes_.add(rawValue);
                            }
                            input.popLimit(oldLimit);
                            break;
                        }
                        case 32: {

                            gangScore_ = input.readInt32();
                            break;
                        }
                        case 40: {

                            maScore_ = input.readInt32();
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            cards_.add(input.readInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            chiCards_.add(input.readInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                chiCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            pengCards_.add(input.readInt32());
                            break;
                        }
                        case 66: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                pengCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 72: {
                            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000100;
                            }
                            anGangCards_.add(input.readInt32());
                            break;
                        }
                        case 74: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000100;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                anGangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 80: {
                            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000200;
                            }
                            mingGangCards_.add(input.readInt32());
                            break;
                        }
                        case 82: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000200;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                mingGangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 88: {

                            winOrLose_ = input.readInt32();
                            break;
                        }
                        case 96: {

                            score_ = input.readInt32();
                            break;
                        }
                        case 104: {
                            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                                maCard_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00001000;
                            }
                            maCard_.add(input.readInt32());
                            break;
                        }
                        case 106: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                                maCard_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00001000;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                maCard_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                }
                if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                }
                if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                    anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
                }
                if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                    mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
                }
                if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                    maCard_ = java.util.Collections.unmodifiableList(maCard_);
                }
                makeExtensionsImmutable();
            }
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 anGangCards = 9;</code>
         */
        public java.util.List<java.lang.Integer>
        getAnGangCardsList() {
            return anGangCards_;
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongUserResult prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongUserResult getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<MahjongUserResult> parser() {
            return PARSER;
        }

        /**
         * <pre>
         *总输赢分数
         * </pre>
         *
         * <code>int32 score = 12;</code>
         */
        public int getScore() {
            return score_;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongUserResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongUserResult.class, mahjong.mode.Mahjong.MahjongUserResult.Builder.class);
        }

        /**
         * <pre>
         *人
         * </pre>
         *
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 牌型输赢
         * </pre>
         * <p>
         * <code>int32 cardScore = 2;</code>
         */
        public int getCardScore() {
            return cardScore_;
        }

        /**
         * <pre>
         *牌型
         * </pre>
         *
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<mahjong.mode.Mahjong.ScoreType> getScoreTypesList() {
            return new com.google.protobuf.Internal.ListAdapter<
                    java.lang.Integer, mahjong.mode.Mahjong.ScoreType>(scoreTypes_, scoreTypes_converter_);
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesCount() {
            return scoreTypes_.size();
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public mahjong.mode.Mahjong.ScoreType getScoreTypes(int index) {
            return scoreTypes_converter_.convert(scoreTypes_.get(index));
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getScoreTypesValueList() {
            return scoreTypes_;
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesValue(int index) {
            return scoreTypes_.get(index);
        }

        /**
         * <pre>
         * 杠牌输赢
         * </pre>
         * <p>
         * <code>int32 gangScore = 4;</code>
         */
        public int getGangScore() {
            return gangScore_;
        }

        /**
         * <pre>
         * 卖马输赢
         * </pre>
         * <p>
         * <code>int32 maScore = 5;</code>
         */
        public int getMaScore() {
            return maScore_;
        }

        /**
         * <pre>
         * 手牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <pre>
         * 手牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 6;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <pre>
         * 手牌
         * </pre>
         * <p>
         * <code>repeated int32 cards = 6;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 吃牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getChiCardsList() {
            return chiCards_;
        }

        /**
         * <pre>
         * 吃牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public int getChiCards(int index) {
            return chiCards_.get(index);
        }

        /**
         * <pre>
         *碰牌
         * </pre>
         *
         * <code>repeated int32 pengCards = 8;</code>
         */
        public java.util.List<java.lang.Integer>
        getPengCardsList() {
            return pengCards_;
        }

        /**
         * <pre>
         *碰牌
         * </pre>
         *
         * <code>repeated int32 pengCards = 8;</code>
         */
        public int getPengCardsCount() {
            return pengCards_.size();
        }

        /**
         * <pre>
         *暗杠的牌
         * </pre>
         *
         * <code>repeated int32 anGangCards = 9;</code>
         */
        public int getAnGangCardsCount() {
            return anGangCards_.size();
        }

        /**
         * <pre>
         *暗杠的牌
         * </pre>
         *
         * <code>repeated int32 anGangCards = 9;</code>
         */
        public int getAnGangCards(int index) {
            return anGangCards_.get(index);
        }

        /**
         * <pre>
         * 明杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 mingGangCards = 10;</code>
         */
        public java.util.List<java.lang.Integer>
        getMingGangCardsList() {
            return mingGangCards_;
        }

        /**
         * <pre>
         * 明杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 mingGangCards = 10;</code>
         */
        public int getMingGangCardsCount() {
            return mingGangCards_.size();
        }

        /**
         * <pre>
         * 明杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 mingGangCards = 10;</code>
         */
        public int getMingGangCards(int index) {
            return mingGangCards_.get(index);
        }

        /**
         * <pre>
         *当局输赢
         * </pre>
         *
         * <code>int32 winOrLose = 11;</code>
         */
        public int getWinOrLose() {
            return winOrLose_;
        }

        /**
         * <pre>
         *买的马
         * </pre>
         *
         * <code>repeated int32 maCard = 13;</code>
         */
        public java.util.List<java.lang.Integer>
        getMaCardList() {
            return maCard_;
        }

        public Builder newBuilderForType() { return newBuilder(); }

        /**
         * <pre>
         *买的马
         * </pre>
         *
         * <code>repeated int32 maCard = 13;</code>
         */
        public int getMaCardCount() {
            return maCard_.size();
        }

        /**
         * <pre>
         *买的马
         * </pre>
         *
         * <code>repeated int32 maCard = 13;</code>
         */
        public int getMaCard(int index) {
            return maCard_.get(index);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (cardScore_ != 0) {
                output.writeInt32(2, cardScore_);
            }
            if (getScoreTypesList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(scoreTypesMemoizedSerializedSize);
            }
            for (int i = 0; i < scoreTypes_.size(); i++) {
                output.writeEnumNoTag(scoreTypes_.get(i));
            }
            if (gangScore_ != 0) {
                output.writeInt32(4, gangScore_);
            }
            if (maScore_ != 0) {
                output.writeInt32(5, maScore_);
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeInt32NoTag(cards_.get(i));
            }
            if (getChiCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < chiCards_.size(); i++) {
                output.writeInt32NoTag(chiCards_.get(i));
            }
            if (getPengCardsList().size() > 0) {
                output.writeUInt32NoTag(66);
                output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < pengCards_.size(); i++) {
                output.writeInt32NoTag(pengCards_.get(i));
            }
            if (getAnGangCardsList().size() > 0) {
                output.writeUInt32NoTag(74);
                output.writeUInt32NoTag(anGangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < anGangCards_.size(); i++) {
                output.writeInt32NoTag(anGangCards_.get(i));
            }
            if (getMingGangCardsList().size() > 0) {
                output.writeUInt32NoTag(82);
                output.writeUInt32NoTag(mingGangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < mingGangCards_.size(); i++) {
                output.writeInt32NoTag(mingGangCards_.get(i));
            }
            if (winOrLose_ != 0) {
                output.writeInt32(11, winOrLose_);
            }
            if (score_ != 0) {
                output.writeInt32(12, score_);
            }
            if (getMaCardList().size() > 0) {
                output.writeUInt32NoTag(106);
                output.writeUInt32NoTag(maCardMemoizedSerializedSize);
            }
            for (int i = 0; i < maCard_.size(); i++) {
                output.writeInt32NoTag(maCard_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            if (cardScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, cardScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < scoreTypes_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeEnumSizeNoTag(scoreTypes_.get(i));
                }
                size += dataSize;
                if (!getScoreTypesList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(dataSize);
                }scoreTypesMemoizedSerializedSize = dataSize;
            }
            if (gangScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, gangScore_);
            }
            if (maScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, maScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < chiCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(chiCards_.get(i));
                }
                size += dataSize;
                if (!getChiCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                chiCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < pengCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(pengCards_.get(i));
                }
                size += dataSize;
                if (!getPengCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                pengCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < anGangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(anGangCards_.get(i));
                }
                size += dataSize;
                if (!getAnGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                anGangCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < mingGangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(mingGangCards_.get(i));
                }
                size += dataSize;
                if (!getMingGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                mingGangCardsMemoizedSerializedSize = dataSize;
            }
            if (winOrLose_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(11, winOrLose_);
            }
            if (score_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(12, score_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < maCard_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(maCard_.get(i));
                }
                size += dataSize;
                if (!getMaCardList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                maCardMemoizedSerializedSize = dataSize;
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongUserResult)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongUserResult other = (mahjong.mode.Mahjong.MahjongUserResult) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && (getCardScore()
                    == other.getCardScore());
            result = result && scoreTypes_.equals(other.scoreTypes_);
            result = result && (getGangScore()
                    == other.getGangScore());
            result = result && (getMaScore()
                    == other.getMaScore());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && getChiCardsList()
                    .equals(other.getChiCardsList());
            result = result && getPengCardsList()
                    .equals(other.getPengCardsList());
            result = result && getAnGangCardsList()
                    .equals(other.getAnGangCardsList());
            result = result && getMingGangCardsList()
                    .equals(other.getMingGangCardsList());
            result = result && (getWinOrLose()
                    == other.getWinOrLose());
            result = result && (getScore()
                    == other.getScore());
            result = result && getMaCardList()
                    .equals(other.getMaCardList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            hash = (37 * hash) + CARDSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getCardScore();
            if (getScoreTypesCount() > 0) {
                hash = (37 * hash) + SCORETYPES_FIELD_NUMBER;
                hash = (53 * hash) + scoreTypes_.hashCode();
            }
            hash = (37 * hash) + GANGSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getGangScore();
            hash = (37 * hash) + MASCORE_FIELD_NUMBER;
            hash = (53 * hash) + getMaScore();
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            if (getChiCardsCount() > 0) {
                hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
                hash = (53 * hash) + getChiCardsList().hashCode();
            }
            if (getPengCardsCount() > 0) {
                hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPengCardsList().hashCode();
            }
            if (getAnGangCardsCount() > 0) {
                hash = (37 * hash) + ANGANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getAnGangCardsList().hashCode();
            }
            if (getMingGangCardsCount() > 0) {
                hash = (37 * hash) + MINGGANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getMingGangCardsList().hashCode();
            }
            hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
            hash = (53 * hash) + getWinOrLose();
            hash = (37 * hash) + SCORE_FIELD_NUMBER;
            hash = (53 * hash) + getScore();
            if (getMaCardCount() > 0) {
                hash = (37 * hash) + MACARD_FIELD_NUMBER;
                hash = (53 * hash) + getMaCardList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MahjongUserResult> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Mahjong.MahjongUserResult getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 单个人结算
         * </pre>
         * <p>
         * Protobuf type {@code MahjongUserResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MahjongUserResult)
                mahjong.mode.Mahjong.MahjongUserResultOrBuilder {
            private int bitField0_;
            private int iD_;
            private int cardScore_;
            private java.util.List<java.lang.Integer> scoreTypes_ =
                    java.util.Collections.emptyList();
            private int gangScore_;
            private int maScore_;
            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> anGangCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> mingGangCards_ = java.util.Collections.emptyList();
            private int winOrLose_;
            private int score_;
            private java.util.List<java.lang.Integer> maCard_ = java.util.Collections.emptyList();

            // Construct using mahjong.mode.Mahjong.MahjongUserResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Mahjong.internal_static_MahjongUserResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Mahjong.MahjongUserResult.class, mahjong.mode.Mahjong.MahjongUserResult.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                cardScore_ = 0;

                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                gangScore_ = 0;

                maScore_ = 0;

                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                anGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000100);
                mingGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000200);
                winOrLose_ = 0;

                score_ = 0;

                maCard_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00001000);
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
            }

            public mahjong.mode.Mahjong.MahjongUserResult getDefaultInstanceForType() {
                return mahjong.mode.Mahjong.MahjongUserResult.getDefaultInstance();
            }

            public mahjong.mode.Mahjong.MahjongUserResult build() {
                mahjong.mode.Mahjong.MahjongUserResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Mahjong.MahjongUserResult buildPartial() {
                mahjong.mode.Mahjong.MahjongUserResult result = new mahjong.mode.Mahjong.MahjongUserResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                result.cardScore_ = cardScore_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.scoreTypes_ = scoreTypes_;
                result.gangScore_ = gangScore_;
                result.maScore_ = maScore_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.cards_ = cards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.chiCards_ = chiCards_;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                    bitField0_ = (bitField0_ & ~0x00000080);
                }
                result.pengCards_ = pengCards_;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                    anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
                    bitField0_ = (bitField0_ & ~0x00000100);
                }
                result.anGangCards_ = anGangCards_;
                if (((bitField0_ & 0x00000200) == 0x00000200)) {
                    mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
                    bitField0_ = (bitField0_ & ~0x00000200);
                }
                result.mingGangCards_ = mingGangCards_;
                result.winOrLose_ = winOrLose_;
                result.score_ = score_;
                if (((bitField0_ & 0x00001000) == 0x00001000)) {
                    maCard_ = java.util.Collections.unmodifiableList(maCard_);
                    bitField0_ = (bitField0_ & ~0x00001000);
                }
                result.maCard_ = maCard_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Mahjong.MahjongUserResult) {
                    return mergeFrom((mahjong.mode.Mahjong.MahjongUserResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Mahjong.MahjongUserResult other) {
                if (other == mahjong.mode.Mahjong.MahjongUserResult.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (other.getCardScore() != 0) {
                    setCardScore(other.getCardScore());
                }
                if (!other.scoreTypes_.isEmpty()) {
                    if (scoreTypes_.isEmpty()) {
                        scoreTypes_ = other.scoreTypes_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureScoreTypesIsMutable();
                        scoreTypes_.addAll(other.scoreTypes_);
                    }
                    onChanged();
                }
                if (other.getGangScore() != 0) {
                    setGangScore(other.getGangScore());
                }
                if (other.getMaScore() != 0) {
                    setMaScore(other.getMaScore());
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (!other.chiCards_.isEmpty()) {
                    if (chiCards_.isEmpty()) {
                        chiCards_ = other.chiCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureChiCardsIsMutable();
                        chiCards_.addAll(other.chiCards_);
                    }
                    onChanged();
                }
                if (!other.pengCards_.isEmpty()) {
                    if (pengCards_.isEmpty()) {
                        pengCards_ = other.pengCards_;
                        bitField0_ = (bitField0_ & ~0x00000080);
                    } else {
                        ensurePengCardsIsMutable();
                        pengCards_.addAll(other.pengCards_);
                    }
                    onChanged();
                }
                if (!other.anGangCards_.isEmpty()) {
                    if (anGangCards_.isEmpty()) {
                        anGangCards_ = other.anGangCards_;
                        bitField0_ = (bitField0_ & ~0x00000100);
                    } else {
                        ensureAnGangCardsIsMutable();
                        anGangCards_.addAll(other.anGangCards_);
                    }
                    onChanged();
                }
                if (!other.mingGangCards_.isEmpty()) {
                    if (mingGangCards_.isEmpty()) {
                        mingGangCards_ = other.mingGangCards_;
                        bitField0_ = (bitField0_ & ~0x00000200);
                    } else {
                        ensureMingGangCardsIsMutable();
                        mingGangCards_.addAll(other.mingGangCards_);
                    }
                    onChanged();
                }
                if (other.getWinOrLose() != 0) {
                    setWinOrLose(other.getWinOrLose());
                }
                if (other.getScore() != 0) {
                    setScore(other.getScore());
                }
                if (!other.maCard_.isEmpty()) {
                    if (maCard_.isEmpty()) {
                        maCard_ = other.maCard_;
                        bitField0_ = (bitField0_ & ~0x00001000);
                    } else {
                        ensureMaCardIsMutable();
                        maCard_.addAll(other.maCard_);
                    }
                    onChanged();
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Mahjong.MahjongUserResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Mahjong.MahjongUserResult) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public int getCardScore() {
                return cardScore_;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder setCardScore(int value) {

                cardScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder clearCardScore() {

                cardScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureScoreTypesIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>(scoreTypes_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.ScoreType> getScoreTypesList() {
                return new com.google.protobuf.Internal.ListAdapter<
                        java.lang.Integer, mahjong.mode.Mahjong.ScoreType>(scoreTypes_, scoreTypes_converter_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesCount() {
                return scoreTypes_.size();
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public mahjong.mode.Mahjong.ScoreType getScoreTypes(int index) {
                return scoreTypes_converter_.convert(scoreTypes_.get(index));
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypes(
                    int index, mahjong.mode.Mahjong.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypes(mahjong.mode.Mahjong.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypes(
                    java.lang.Iterable<? extends mahjong.mode.Mahjong.ScoreType> values) {
                ensureScoreTypesIsMutable();
                for (mahjong.mode.Mahjong.ScoreType value : values) {
                    scoreTypes_.add(value.getNumber());
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder clearScoreTypes() {
                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getScoreTypesValueList() {
                return java.util.Collections.unmodifiableList(scoreTypes_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesValue(int index) {
                return scoreTypes_.get(index);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypesValue(
                    int index, int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypesValue(int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypesValue(
                    java.lang.Iterable<java.lang.Integer> values) {
                ensureScoreTypesIsMutable();
                for (int value : values) {
                    scoreTypes_.add(value);
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public int getGangScore() {
                return gangScore_;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder setGangScore(int value) {

                gangScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder clearGangScore() {

                gangScore_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public int getMaScore() {
                return maScore_;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder setMaScore(int value) {

                maScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder clearMaScore() {

                maScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *手牌
             * </pre>
             *
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureChiCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
                    bitField0_ |= 0x00000040;
                }
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public java.util.List<java.lang.Integer>
            getChiCardsList() {
                return java.util.Collections.unmodifiableList(chiCards_);
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public int getChiCardsCount() {
                return chiCards_.size();
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public int getChiCards(int index) {
                return chiCards_.get(index);
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder setChiCards(
                    int index, int value) {
                ensureChiCardsIsMutable();
                chiCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder addChiCards(int value) {
                ensureChiCardsIsMutable();
                chiCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder addAllChiCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureChiCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, chiCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder clearChiCards() {
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            private void ensurePengCardsIsMutable() {
                if (!((bitField0_ & 0x00000080) == 0x00000080)) {
                    pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
                    bitField0_ |= 0x00000080;
                }
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public java.util.List<java.lang.Integer>
            getPengCardsList() {
                return java.util.Collections.unmodifiableList(pengCards_);
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public int getPengCardsCount() {
                return pengCards_.size();
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public int getPengCards(int index) {
                return pengCards_.get(index);
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public Builder setPengCards(
                    int index, int value) {
                ensurePengCardsIsMutable();
                pengCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public Builder addPengCards(int value) {
                ensurePengCardsIsMutable();
                pengCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public Builder addAllPengCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePengCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, pengCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 8;</code>
             */
            public Builder clearPengCards() {
                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                onChanged();
                return this;
            }

            private void ensureAnGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000100) == 0x00000100)) {
                    anGangCards_ = new java.util.ArrayList<java.lang.Integer>(anGangCards_);
                    bitField0_ |= 0x00000100;
                }
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public java.util.List<java.lang.Integer>
            getAnGangCardsList() {
                return java.util.Collections.unmodifiableList(anGangCards_);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public int getAnGangCardsCount() {
                return anGangCards_.size();
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public int getAnGangCards(int index) {
                return anGangCards_.get(index);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public Builder setAnGangCards(
                    int index, int value) {
                ensureAnGangCardsIsMutable();
                anGangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public Builder addAnGangCards(int value) {
                ensureAnGangCardsIsMutable();
                anGangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public Builder addAllAnGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureAnGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, anGangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 anGangCards = 9;</code>
             */
            public Builder clearAnGangCards() {
                anGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000100);
                onChanged();
                return this;
            }

            private void ensureMingGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000200) == 0x00000200)) {
                    mingGangCards_ = new java.util.ArrayList<java.lang.Integer>(mingGangCards_);
                    bitField0_ |= 0x00000200;
                }
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public java.util.List<java.lang.Integer>
            getMingGangCardsList() {
                return java.util.Collections.unmodifiableList(mingGangCards_);
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public int getMingGangCardsCount() {
                return mingGangCards_.size();
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public int getMingGangCards(int index) {
                return mingGangCards_.get(index);
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public Builder setMingGangCards(
                    int index, int value) {
                ensureMingGangCardsIsMutable();
                mingGangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public Builder addMingGangCards(int value) {
                ensureMingGangCardsIsMutable();
                mingGangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *明杠的牌
             * </pre>
             *
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public Builder addAllMingGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureMingGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, mingGangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 mingGangCards = 10;</code>
             */
            public Builder clearMingGangCards() {
                mingGangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000200);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 11;</code>
             */
            public int getWinOrLose() {
                return winOrLose_;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 11;</code>
             */
            public Builder setWinOrLose(int value) {

                winOrLose_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 11;</code>
             */
            public Builder clearWinOrLose() {

                winOrLose_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 12;</code>
             */
            public int getScore() {
                return score_;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 12;</code>
             */
            public Builder setScore(int value) {

                score_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 12;</code>
             */
            public Builder clearScore() {

                score_ = 0;
                onChanged();
                return this;
            }

            private void ensureMaCardIsMutable() {
                if (!((bitField0_ & 0x00001000) == 0x00001000)) {
                    maCard_ = new java.util.ArrayList<java.lang.Integer>(maCard_);
                    bitField0_ |= 0x00001000;
                }
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public java.util.List<java.lang.Integer>
            getMaCardList() {
                return java.util.Collections.unmodifiableList(maCard_);
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public int getMaCardCount() {
                return maCard_.size();
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public int getMaCard(int index) {
                return maCard_.get(index);
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public Builder setMaCard(
                    int index, int value) {
                ensureMaCardIsMutable();
                maCard_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public Builder addMaCard(int value) {
                ensureMaCardIsMutable();
                maCard_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public Builder addAllMaCard(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureMaCardIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, maCard_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 买的马
             * </pre>
             * <p>
             * <code>repeated int32 maCard = 13;</code>
             */
            public Builder clearMaCard() {
                maCard_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00001000);
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:MahjongUserResult)
        }

    }

    /**
     * <pre>
     * 结束 OVER
     * </pre>
     * <p>
     * Protobuf type {@code MahjongOverResponse}
     */
    public static final class MahjongOverResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:MahjongOverResponse)
            MahjongOverResponseOrBuilder {
        public static final int GAMEOVER_FIELD_NUMBER = 1;
        public static final int BACKKEY_FIELD_NUMBER = 2;
        public static final int DATETIME_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:MahjongOverResponse)
        private static final mahjong.mode.Mahjong.MahjongOverResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<MahjongOverResponse>
                PARSER = new com.google.protobuf.AbstractParser<MahjongOverResponse>() {
            public MahjongOverResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MahjongOverResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongOverResponse();
        }

        private int bitField0_;
        private java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver> gameOver_;
        private volatile java.lang.Object backKey_;
        private long dateTime_;
        private byte memoizedIsInitialized = -1;

        // Use MahjongOverResponse.newBuilder() to construct.
        private MahjongOverResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private MahjongOverResponse() {
            gameOver_ = java.util.Collections.emptyList();
            backKey_ = "";
            dateTime_ = 0L;
        }

        private MahjongOverResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                gameOver_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongSeatGameOver>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            gameOver_.add(
                                    input.readMessage(mahjong.mode.Mahjong.MahjongSeatGameOver.parser(), extensionRegistry));
                            break;
                        }
                        case 18: {
                            java.lang.String s = input.readStringRequireUtf8();

                            backKey_ = s;
                            break;
                        }
                        case 24: {

                            dateTime_ = input.readUInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Mahjong.internal_static_MahjongOverResponse_descriptor;
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Mahjong.MahjongOverResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Mahjong.MahjongOverResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<MahjongOverResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Mahjong.internal_static_MahjongOverResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Mahjong.MahjongOverResponse.class, mahjong.mode.Mahjong.MahjongOverResponse.Builder.class);
        }

        /**
         * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
         */
        public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver> getGameOverList() {
            return gameOver_;
        }

        /**
         * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder>
        getGameOverOrBuilderList() {
            return gameOver_;
        }

        /**
         * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
         */
        public int getGameOverCount() {
            return gameOver_.size();
        }

        /**
         * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongSeatGameOver getGameOver(int index) {
            return gameOver_.get(index);
        }

        /**
         * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder getGameOverOrBuilder(
                int index) {
            return gameOver_.get(index);
        }

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        public java.lang.String getBackKey() {
            java.lang.Object ref = backKey_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                backKey_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        public com.google.protobuf.ByteString
        getBackKeyBytes() {
            java.lang.Object ref = backKey_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                backKey_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * 时间
         * </pre>
         * <p>
         * <code>uint64 dateTime = 3;</code>
         */
        public long getDateTime() {
            return dateTime_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < gameOver_.size(); i++) {
                output.writeMessage(1, gameOver_.get(i));
            }
            if (!getBackKeyBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, backKey_);
            }
            if (dateTime_ != 0L) {
                output.writeUInt64(3, dateTime_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < gameOver_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, gameOver_.get(i));
            }
            if (!getBackKeyBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, backKey_);
            }
            if (dateTime_ != 0L) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(3, dateTime_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Mahjong.MahjongOverResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Mahjong.MahjongOverResponse other = (mahjong.mode.Mahjong.MahjongOverResponse) obj;

            boolean result = true;
            result = result && getGameOverList()
                    .equals(other.getGameOverList());
            result = result && getBackKey()
                    .equals(other.getBackKey());
            result = result && (getDateTime()
                    == other.getDateTime());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getGameOverCount() > 0) {
                hash = (37 * hash) + GAMEOVER_FIELD_NUMBER;
                hash = (53 * hash) + getGameOverList().hashCode();
            }
            hash = (37 * hash) + BACKKEY_FIELD_NUMBER;
            hash = (53 * hash) + getBackKey().hashCode();
            hash = (37 * hash) + DATETIME_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                    getDateTime());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MahjongOverResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Mahjong.MahjongOverResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 结束 OVER
         * </pre>
         * <p>
         * Protobuf type {@code MahjongOverResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:MahjongOverResponse)
                mahjong.mode.Mahjong.MahjongOverResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver> gameOver_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongSeatGameOver, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder, mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder> gameOverBuilder_;
            private java.lang.Object backKey_ = "";
            private long dateTime_;

            // Construct using mahjong.mode.Mahjong.MahjongOverResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Mahjong.internal_static_MahjongOverResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Mahjong.internal_static_MahjongOverResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Mahjong.MahjongOverResponse.class, mahjong.mode.Mahjong.MahjongOverResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getGameOverFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    gameOverBuilder_.clear();
                }
                backKey_ = "";

                dateTime_ = 0L;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Mahjong.internal_static_MahjongOverResponse_descriptor;
            }

            public mahjong.mode.Mahjong.MahjongOverResponse getDefaultInstanceForType() {
                return mahjong.mode.Mahjong.MahjongOverResponse.getDefaultInstance();
            }

            public mahjong.mode.Mahjong.MahjongOverResponse build() {
                mahjong.mode.Mahjong.MahjongOverResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Mahjong.MahjongOverResponse buildPartial() {
                mahjong.mode.Mahjong.MahjongOverResponse result = new mahjong.mode.Mahjong.MahjongOverResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (gameOverBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.gameOver_ = gameOver_;
                } else {
                    result.gameOver_ = gameOverBuilder_.build();
                }
                result.backKey_ = backKey_;
                result.dateTime_ = dateTime_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Mahjong.MahjongOverResponse) {
                    return mergeFrom((mahjong.mode.Mahjong.MahjongOverResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Mahjong.MahjongOverResponse other) {
                if (other == mahjong.mode.Mahjong.MahjongOverResponse.getDefaultInstance()) return this;
                if (gameOverBuilder_ == null) {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOver_.isEmpty()) {
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureGameOverIsMutable();
                            gameOver_.addAll(other.gameOver_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOverBuilder_.isEmpty()) {
                            gameOverBuilder_.dispose();
                            gameOverBuilder_ = null;
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            gameOverBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getGameOverFieldBuilder() : null;
                        } else {
                            gameOverBuilder_.addAllMessages(other.gameOver_);
                        }
                    }
                }
                if (!other.getBackKey().isEmpty()) {
                    backKey_ = other.backKey_;
                    onChanged();
                }
                if (other.getDateTime() != 0L) {
                    setDateTime(other.getDateTime());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Mahjong.MahjongOverResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Mahjong.MahjongOverResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureGameOverIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    gameOver_ = new java.util.ArrayList<mahjong.mode.Mahjong.MahjongSeatGameOver>(gameOver_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver> getGameOverList() {
                if (gameOverBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(gameOver_);
                } else {
                    return gameOverBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public int getGameOverCount() {
                if (gameOverBuilder_ == null) {
                    return gameOver_.size();
                } else {
                    return gameOverBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameOver getGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.set(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(mahjong.mode.Mahjong.MahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    mahjong.mode.Mahjong.MahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addAllGameOver(
                    java.lang.Iterable<? extends mahjong.mode.Mahjong.MahjongSeatGameOver> values) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, gameOver_);
                    onChanged();
                } else {
                    gameOverBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder clearGameOver() {
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    gameOverBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder removeGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.remove(index);
                    onChanged();
                } else {
                    gameOverBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameOver.Builder getGameOverBuilder(
                    int index) {
                return getGameOverFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder getGameOverOrBuilder(
                    int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder>
            getGameOverOrBuilderList() {
                if (gameOverBuilder_ != null) {
                    return gameOverBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(gameOver_);
                }
            }

            /**
             * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongSeatGameOver.Builder addGameOverBuilder() {
                return getGameOverFieldBuilder().addBuilder(
                        mahjong.mode.Mahjong.MahjongSeatGameOver.getDefaultInstance());
      }

      /**
       * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
       */
      public mahjong.mode.Mahjong.MahjongSeatGameOver.Builder addGameOverBuilder(
          int index) {
        return getGameOverFieldBuilder().addBuilder(
                index, mahjong.mode.Mahjong.MahjongSeatGameOver.getDefaultInstance());
      }

      /**
       * <code>repeated .MahjongSeatGameOver gameOver = 1;</code>
       */
      public java.util.List<mahjong.mode.Mahjong.MahjongSeatGameOver.Builder>
           getGameOverBuilderList() {
        return getGameOverFieldBuilder().getBuilderList();
      }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongSeatGameOver, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder, mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder>
          getGameOverFieldBuilder() {
        if (gameOverBuilder_ == null) {
            gameOverBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongSeatGameOver, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder, mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder>(
                    gameOver_,
                    ((bitField0_ & 0x00000001) == 0x00000001),
                    getParentForChildren(),
                    isClean());
          gameOver_ = null;
        }
        return gameOverBuilder_;
      }

      /**
       * <pre>
       *回到大厅的码
       * </pre>
       *
       * <code>string backKey = 2;</code>
       */
      public java.lang.String getBackKey() {
        java.lang.Object ref = backKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
            backKey_ = s;
            return s;
        } else {
            return (java.lang.String) ref;
        }
      }

            /**
             * <pre>
             *回到大厅的码
             * </pre>
       *
       * <code>string backKey = 2;</code>
       */
      public Builder setBackKey(
              java.lang.String value) {
          if (value == null) {
              throw new NullPointerException();
          }

        backKey_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *回到大厅的码
       * </pre>
       *
       * <code>string backKey = 2;</code>
       */
      public com.google.protobuf.ByteString
      getBackKeyBytes() {
          java.lang.Object ref = backKey_;
          if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          backKey_ = b;
          return b;
        } else {
              return (com.google.protobuf.ByteString) ref;
        }
      }

      /**
       * <pre>
       *回到大厅的码
       * </pre>
       *
       * <code>string backKey = 2;</code>
       */
      public Builder setBackKeyBytes(
              com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

          backKey_ = value;
          onChanged();
          return this;
      }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public Builder clearBackKey() {

                backKey_ = getDefaultInstance().getBackKey();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 时间
             * </pre>
             * <p>
             * <code>uint64 dateTime = 3;</code>
             */
            public long getDateTime() {
                return dateTime_;
            }

            /**
             * <pre>
             * 时间
             * </pre>
             * <p>
             * <code>uint64 dateTime = 3;</code>
             */
            public Builder setDateTime(long value) {

                dateTime_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 时间
             * </pre>
             * <p>
             * <code>uint64 dateTime = 3;</code>
             */
            public Builder clearDateTime() {

                dateTime_ = 0L;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:MahjongOverResponse)
        }

    }

  /**
   * Protobuf type {@code MahjongSeatGameOver}
   */
  public  static final class MahjongSeatGameOver extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MahjongSeatGameOver)
      MahjongSeatGameOverOrBuilder {
    public static final int ID_FIELD_NUMBER = 1;
    public static final int WINORLOSE_FIELD_NUMBER = 2;
      public static final int HUCOUNT_FIELD_NUMBER = 3;
      public static final int ZIMOCOUNT_FIELD_NUMBER = 4;
      public static final int DIANPAOCOUNT_FIELD_NUMBER = 5;
      public static final int ANGANG_FIELD_NUMBER = 6;
      public static final int MINGGANG_FIELD_NUMBER = 7;
    private static final long serialVersionUID = 0L;
      // @@protoc_insertion_point(class_scope:MahjongSeatGameOver)
      private static final mahjong.mode.Mahjong.MahjongSeatGameOver DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<MahjongSeatGameOver>
            PARSER = new com.google.protobuf.AbstractParser<MahjongSeatGameOver>() {
        public MahjongSeatGameOver parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new MahjongSeatGameOver(input, extensionRegistry);
        }
    };

    static {
      DEFAULT_INSTANCE = new mahjong.mode.Mahjong.MahjongSeatGameOver();
    }

    private int iD_;
    private int winOrLose_;
    private int huCount_;
    private int zimoCount_;
    private int dianpaoCount_;
    private int angang_;
    private int minggang_;
    private byte memoizedIsInitialized = -1;
    // Use MahjongSeatGameOver.newBuilder() to construct.
    private MahjongSeatGameOver(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MahjongSeatGameOver() {
      iD_ = 0;
      winOrLose_ = 0;
      huCount_ = 0;
      zimoCount_ = 0;
      dianpaoCount_ = 0;
      angang_ = 0;
      minggang_ = 0;
    }

    private MahjongSeatGameOver(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {

                        iD_ = input.readUInt32();
                        break;
                    }
                    case 16: {

                        winOrLose_ = input.readInt32();
                        break;
                    }
                    case 24: {

                        huCount_ = input.readUInt32();
                        break;
                    }
                    case 32: {

                        zimoCount_ = input.readUInt32();
                        break;
                    }
                    case 40: {

                        dianpaoCount_ = input.readUInt32();
                        break;
                    }
                    case 48: {

                        angang_ = input.readUInt32();
                        break;
                    }
                    case 56: {

                        minggang_ = input.readUInt32();
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            makeExtensionsImmutable();
        }
    }

      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
          return mahjong.mode.Mahjong.internal_static_MahjongSeatGameOver_descriptor;
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
              java.nio.ByteBuffer data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    /**
     * <pre>
     *明杠次数
     * </pre>
     *
     * <code>uint32 minggang = 7;</code>
     */
    public int getMinggang() {
      return minggang_;
    }

    public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

      public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(byte[] data)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
              byte[] data,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseDelimitedFrom(java.io.InputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseDelimitedFrom(
              java.io.InputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
              com.google.protobuf.CodedInputStream input)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver parseFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
                  .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(mahjong.mode.Mahjong.MahjongSeatGameOver prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public static mahjong.mode.Mahjong.MahjongSeatGameOver getDefaultInstance() {
          return DEFAULT_INSTANCE;
      }

      public static com.google.protobuf.Parser<MahjongSeatGameOver> parser() {
          return PARSER;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
          return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
          return mahjong.mode.Mahjong.internal_static_MahjongSeatGameOver_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                          mahjong.mode.Mahjong.MahjongSeatGameOver.class, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder.class);
      }

      /**
       * <pre>
       * 人
       * </pre>
       * <p>
       * <code>uint32 ID = 1;</code>
       */
      public int getID() {
          return iD_;
      }

      /**
       * <pre>
       * 总输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 2;</code>
       */
      public int getWinOrLose() {
          return winOrLose_;
      }

      /**
       * <pre>
       *胡牌次数
     * </pre>
     *
     * <code>uint32 huCount = 3;</code>
     */
    public int getHuCount() {
      return huCount_;
    }

    /**
     * <pre>
     *自摸次数
     * </pre>
     *
     * <code>uint32 zimoCount = 4;</code>
     */
    public int getZimoCount() {
      return zimoCount_;
    }

    /**
     * <pre>
     *点炮次数
     * </pre>
     *
     * <code>uint32 dianpaoCount = 5;</code>
     */
    public int getDianpaoCount() {
        return dianpaoCount_;
    }

      /**
       * <pre>
       * 暗杠次数
       * </pre>
       * <p>
       * <code>uint32 angang = 6;</code>
       */
      public int getAngang() {
          return angang_;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
              throws java.io.IOException {
          if (iD_ != 0) {
              output.writeUInt32(1, iD_);
          }
          if (winOrLose_ != 0) {
              output.writeInt32(2, winOrLose_);
          }
          if (huCount_ != 0) {
              output.writeUInt32(3, huCount_);
      }
      if (zimoCount_ != 0) {
        output.writeUInt32(4, zimoCount_);
      }
          if (dianpaoCount_ != 0) {
              output.writeUInt32(5, dianpaoCount_);
          }
          if (angang_ != 0) {
              output.writeUInt32(6, angang_);
          }
          if (minggang_ != 0) {
              output.writeUInt32(7, minggang_);
          }
      }

      public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (iD_ != 0) {
              size += com.google.protobuf.CodedOutputStream
                      .computeUInt32Size(1, iD_);
          }
          if (winOrLose_ != 0) {
              size += com.google.protobuf.CodedOutputStream
                      .computeInt32Size(2, winOrLose_);
      }
      if (huCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, huCount_);
      }
      if (zimoCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, zimoCount_);
      }
      if (dianpaoCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, dianpaoCount_);
      }
          if (angang_ != 0) {
              size += com.google.protobuf.CodedOutputStream
                      .computeUInt32Size(6, angang_);
          }
          if (minggang_ != 0) {
              size += com.google.protobuf.CodedOutputStream
                      .computeUInt32Size(7, minggang_);
          }
          memoizedSize = size;
          return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mahjong.mode.Mahjong.MahjongSeatGameOver)) {
          return super.equals(obj);
      }
        mahjong.mode.Mahjong.MahjongSeatGameOver other = (mahjong.mode.Mahjong.MahjongSeatGameOver) obj;

      boolean result = true;
      result = result && (getID()
          == other.getID());
      result = result && (getWinOrLose()
          == other.getWinOrLose());
        result = result && (getHuCount()
                == other.getHuCount());
        result = result && (getZimoCount()
                == other.getZimoCount());
        result = result && (getDianpaoCount()
                == other.getDianpaoCount());
        result = result && (getAngang()
                == other.getAngang());
        result = result && (getMinggang()
                == other.getMinggang());
        return result;
    }

      @java.lang.Override
      public int hashCode() {
          if (memoizedHashCode != 0) {
              return memoizedHashCode;
      }
      int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + ID_FIELD_NUMBER;
          hash = (53 * hash) + getID();
          hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
          hash = (53 * hash) + getWinOrLose();
          hash = (37 * hash) + HUCOUNT_FIELD_NUMBER;
          hash = (53 * hash) + getHuCount();
          hash = (37 * hash) + ZIMOCOUNT_FIELD_NUMBER;
          hash = (53 * hash) + getZimoCount();
          hash = (37 * hash) + DIANPAOCOUNT_FIELD_NUMBER;
          hash = (53 * hash) + getDianpaoCount();
      hash = (37 * hash) + ANGANG_FIELD_NUMBER;
      hash = (53 * hash) + getAngang();
      hash = (37 * hash) + MINGGANG_FIELD_NUMBER;
      hash = (53 * hash) + getMinggang();
      hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
      }

      public Builder newBuilderForType() {
          return newBuilder();
      }

      public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
                  ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongSeatGameOver> getParserForType() {
      return PARSER;
    }

    public mahjong.mode.Mahjong.MahjongSeatGameOver getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    /**
     * Protobuf type {@code MahjongSeatGameOver}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongSeatGameOver)
            mahjong.mode.Mahjong.MahjongSeatGameOverOrBuilder {
      private int iD_ ;
      private int winOrLose_ ;
      private int huCount_ ;
      private int zimoCount_ ;
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        iD_ = 0;

        winOrLose_ = 0;

        huCount_ = 0;

        zimoCount_ = 0;

        dianpaoCount_ = 0;

        angang_ = 0;

        minggang_ = 0;

        return this;
      }
      private int dianpaoCount_ ;
      private int angang_ ;

        public mahjong.mode.Mahjong.MahjongSeatGameOver build() {
            mahjong.mode.Mahjong.MahjongSeatGameOver result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        private int minggang_;

        public Builder clone() {
        return (Builder) super.clone();
      }
      // Construct using mahjong.mode.Mahjong.MahjongSeatGameOver.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mahjong.mode.Mahjong.internal_static_MahjongSeatGameOver_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
          return mahjong.mode.Mahjong.internal_static_MahjongSeatGameOver_fieldAccessorTable
                  .ensureFieldAccessorsInitialized(
                          mahjong.mode.Mahjong.MahjongSeatGameOver.class, mahjong.mode.Mahjong.MahjongSeatGameOver.Builder.class);
      }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return mahjong.mode.Mahjong.internal_static_MahjongSeatGameOver_descriptor;
        }

        public final boolean isInitialized() {
            return true;
      }

      public mahjong.mode.Mahjong.MahjongSeatGameOver getDefaultInstanceForType() {
        return mahjong.mode.Mahjong.MahjongSeatGameOver.getDefaultInstance();
      }

        public mahjong.mode.Mahjong.MahjongSeatGameOver buildPartial() {
            mahjong.mode.Mahjong.MahjongSeatGameOver result = new mahjong.mode.Mahjong.MahjongSeatGameOver(this);
            result.iD_ = iD_;
            result.winOrLose_ = winOrLose_;
            result.huCount_ = huCount_;
            result.zimoCount_ = zimoCount_;
            result.dianpaoCount_ = dianpaoCount_;
            result.angang_ = angang_;
            result.minggang_ = minggang_;
            onBuilt();
            return result;
        }

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
      }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mahjong.mode.Mahjong.MahjongSeatGameOver) {
          return mergeFrom((mahjong.mode.Mahjong.MahjongSeatGameOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mahjong.mode.Mahjong.MahjongSeatGameOver other) {
        if (other == mahjong.mode.Mahjong.MahjongSeatGameOver.getDefaultInstance()) return this;
        if (other.getID() != 0) {
          setID(other.getID());
        }
        if (other.getWinOrLose() != 0) {
          setWinOrLose(other.getWinOrLose());
        }
          if (other.getHuCount() != 0) {
              setHuCount(other.getHuCount());
          }
        if (other.getZimoCount() != 0) {
          setZimoCount(other.getZimoCount());
        }
        if (other.getDianpaoCount() != 0) {
          setDianpaoCount(other.getDianpaoCount());
        }
        if (other.getAngang() != 0) {
          setAngang(other.getAngang());
        }
        if (other.getMinggang() != 0) {
          setMinggang(other.getMinggang());
        }
        onChanged();
        return this;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mahjong.mode.Mahjong.MahjongSeatGameOver parsedMessage = null;
        try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (mahjong.mode.Mahjong.MahjongSeatGameOver) e.getUnfinishedMessage();
            throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      /**
       * <pre>
       *人
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder setID(int value) {

        iD_ = value;
          onChanged();
          return this;
      }

        /**
         * <pre>
       *人
         * </pre>
         *
         * <code>uint32 ID = 1;</code>
       */
        public Builder clearID() {

            iD_ = 0;
            onChanged();
            return this;
        }

        /**
         * <pre>
         *总输赢
       * </pre>
       *
       * <code>int32 winOrLose = 2;</code>
       */
      public int getWinOrLose() {
        return winOrLose_;
      }

      /**
       * <pre>
       *总输赢
       * </pre>
       *
       * <code>int32 winOrLose = 2;</code>
       */
      public Builder setWinOrLose(int value) {

        winOrLose_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *总输赢
       * </pre>
       *
       * <code>int32 winOrLose = 2;</code>
       */
      public Builder clearWinOrLose() {

          winOrLose_ = 0;
          onChanged();
          return this;
      }

        /**
         * <pre>
         *胡牌次数
         * </pre>
         *
         * <code>uint32 huCount = 3;</code>
         */
        public int getHuCount() {
            return huCount_;
        }

        /**
         * <pre>
         *胡牌次数
         * </pre>
         *
         * <code>uint32 huCount = 3;</code>
         */
      public Builder setHuCount(int value) {

        huCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *胡牌次数
       * </pre>
       *
       * <code>uint32 huCount = 3;</code>
       */
      public Builder clearHuCount() {

        huCount_ = 0;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *自摸次数
       * </pre>
       *
       * <code>uint32 zimoCount = 4;</code>
       */
      public int getZimoCount() {
        return zimoCount_;
      }

      /**
       * <pre>
       *自摸次数
       * </pre>
       *
       * <code>uint32 zimoCount = 4;</code>
       */
      public Builder setZimoCount(int value) {

          zimoCount_ = value;
          onChanged();
          return this;
      }

        /**
         * <pre>
         *自摸次数
         * </pre>
         *
         * <code>uint32 zimoCount = 4;</code>
         */
        public Builder clearZimoCount() {

            zimoCount_ = 0;
            onChanged();
            return this;
        }

      /**
       * <pre>
       *点炮次数
       * </pre>
       *
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public int getDianpaoCount() {
        return dianpaoCount_;
      }

      /**
       * <pre>
       *点炮次数
       * </pre>
       *
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public Builder setDianpaoCount(int value) {

        dianpaoCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *暗杠次数
       * </pre>
       *
       * <code>uint32 angang = 6;</code>
       */
      public int getAngang() {
        return angang_;
      }

      /**
       * <pre>
       *点炮次数
       * </pre>
       *
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public Builder clearDianpaoCount() {

        dianpaoCount_ = 0;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠次数
       * </pre>
       *
       * <code>uint32 angang = 6;</code>
       */
      public Builder setAngang(int value) {

        angang_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠次数
       * </pre>
       *
       * <code>uint32 angang = 6;</code>
       */
      public Builder clearAngang() {

        angang_ = 0;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *明杠次数
       * </pre>
       *
       * <code>uint32 minggang = 7;</code>
       */
      public int getMinggang() {
        return minggang_;
      }

      /**
       * <pre>
       *明杠次数
       * </pre>
       *
       * <code>uint32 minggang = 7;</code>
       */
      public Builder setMinggang(int value) {

        minggang_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *明杠次数
       * </pre>
       *
       * <code>uint32 minggang = 7;</code>
       */
      public Builder clearMinggang() {

        minggang_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongSeatGameOver)
    }

  }

  // @@protoc_insertion_point(outer_class_scope)
}
